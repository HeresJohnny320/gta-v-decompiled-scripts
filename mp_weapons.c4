// listener's C4 decompiler

void main() {
    l_2 = 1;
    l_3 = 134;
    l_4 = 134;
    l_5 = 1;
    l_6 = 1;
    l_7 = 1;
    l_8 = 134;
    l_9 = 1;
    l_A = 12;
    l_B = 12;
    l_E = 0.001;
    l_11 = "NULL";
    l_16 = 80.0;
    l_17 = 140.0;
    l_18 = 180.0;
    l_1B = 3;
    l_1C = 0.0;
    l_20 = -0.0375;
    l_21 = 0.17;
    l_27 = 1;
    l_28 = 65;
    l_29 = 49;
    l_2A = 64;
    l_56 = (0.05 + 0.275) - 0.009999999999999998;
    l_58 = 3;
    l_59 = 9;
    if (sub_8ba9() == 2) {
        while (1) {
            SYSTEM::WAIT(0);
        }
    }
    UI::_2162C446DFDF38FD(1);
    GAMEPLAY::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME();
    g_1406B4 = 1;
    v_2 = 0;
    g_143BF4._f119 = 1;
    g_143270._f1 = 0;
    g_143270._f3 = 0;
    g_143270._f5 = 0;
    sub_8b7f(&g_143BF4);
    sub_8b71(&g_143BF4);
    sub_8b63(&g_143BF4);
    sub_8ad0();
    sub_8ac1(0, &g_143BF4);
    GRAPHICS::_61BB1D9B3A95D802(7);
    UI::_DD564BDD0472C936(0x14211b54);
    UI::_DD564BDD0472C936(${navigating_content});
    UI::ENABLE_DEATHBLOOD_SEETHROUGH(0);
    sub_86c6();
    v_7 = 1;
    switch (l_74) {
    case 3:
        while (v_2 == 0) {
            SYSTEM::WAIT(0);
            if (v_7 == 1) {
                if (v_8 == 0) {
                    if (UI::_3BAB9A4E4F2FF5C7()) {
                        UI::_EC9264727EEC0F28();
                        v_8 = 1;
                    }
                }
            }
            if (sub_862c(201)) {
                if (v_7 == 0) {
                    AUDIO::PLAY_SOUND_FRONTEND(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
                    g_143270._f1 = 0;
                    g_143270._f3 = 0;
                    v_7 = 1;
                    sub_8ac1(0, &g_143BF4);
                    sub_8b71(&g_143BF4);
                    sub_8b63(&g_143BF4);
                    sub_85d5(&g_143BF4, &g_143270);
                    GRAPHICS::_AB58C27C2E6123C6("MENU_SHIFT_DEPTH");
                    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(1);
                    GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                }
            }
            if (v_7 == 0) {
                if (sub_862c(189) || sub_862c(190)) {
                    v_2 = 1;
                }
            }
            if (sub_862c(202)) {
                sub_8567();
                if (v_7 == 1) {
                    GRAPHICS::_AB58C27C2E6123C6("MENU_SHIFT_DEPTH");
                    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(-1);
                    GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                    AUDIO::PLAY_SOUND_FRONTEND(-1, "BACK", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
                    UI::OBJECT_DECAL_TOGGLE(0x14211b54);
                    UI::ENABLE_DEATHBLOOD_SEETHROUGH(0);
                    sub_8b71(&g_143BF4);
                    sub_8b63(&g_143BF4);
                    sub_8ac1(-1, &g_143BF4);
                    v_7 = 0;
                } else { 
                    AUDIO::PLAY_SOUND_FRONTEND(-1, "BACK", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
                    v_2 = 1;
                    UI::_14621BB1DF14E2B2();
                }
            }
            if (UI::_F284AC67940C6812()) {
                UI::_36C1451A88A09630(&v_4, &v_5);
            }
            if (UI::_2E22FEFA0100275E()) {
                UI::_7E17BE53E1AAABAF(&v_3, &v_4, &v_5);
                v_6 = v_4 + 1000;
                if (v_6 >= 0) {
                    if (v_6 >= 9) {
                        v_6 = 8;
                    }
                    g_143270._f1 = v_6 % 3;
                    g_143270._f3 = v_6 / 3;
                    sub_8ac1(v_6, &g_143BF4);
                    sub_8b63(&g_143BF4);
                }
            }
            GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("MPWeaponsCommon", 0);
            GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("MPWeaponsGang0", 0);
            GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("MPWeaponsGang1", 0);
            sub_9bb(&g_143BF4, &g_143270);
            if (v_7 == 1) {
                sub_309(&g_143BF4, &g_143270, &l_72);
            }
        }
        break;
    case 0:
        break;
    case 1:
        break;
    case 2:
        break;
    }
    UI::_14621BB1DF14E2B2();
    UI::_2162C446DFDF38FD(0);
    g_1406B4 = 0;
    GRAPHICS::_61BB1D9B3A95D802(4);
    while (1) {
        SYSTEM::WAIT(0);
    }
}

void sub_309(auto a_0, auto a_1, auto a_2) {
    if ((!sub_9af(a_2)) || (sub_9af(a_2) && sub_951(a_2, 250, 0))) {
        v_5 = 1;
    }
    if ((CONTROLS::IS_CONTROL_PRESSED(2, 187) || sub_7ee(187, &g_1441E9._f3C1, 1)) && v_5) {
        sub_7e1(a_2);
        sub_79c(a_2, 0, 0);
        GAMEPLAY::SET_BIT(&a_0._f11D, 0);
    }
    if ((CONTROLS::IS_CONTROL_PRESSED(2, 188) || sub_7ee(188, &g_1441E9._f3C1, 1)) && v_5) {
        sub_7e1(a_2);
        sub_79c(a_2, 0, 0);
        GAMEPLAY::SET_BIT(&a_0._f11D, 1);
    }
    if (((CONTROLS::IS_CONTROL_PRESSED(2, 189) || CONTROLS::IS_CONTROL_PRESSED(2, 241)) || sub_7ee(189, &g_1441E9._f3C1, 1)) && v_5) {
        sub_7e1(a_2);
        sub_79c(a_2, 0, 0);
        GAMEPLAY::SET_BIT(&a_0._f11D, 2);
    }
    if (((CONTROLS::IS_CONTROL_PRESSED(2, 190) || CONTROLS::IS_CONTROL_PRESSED(2, 242)) || sub_7ee(190, &g_1441E9._f3C1, 1)) && v_5) {
        GAMEPLAY::SET_BIT(&a_0._f11D, 3);
        sub_7e1(a_2);
        sub_79c(a_2, 0, 0);
    }
    if (GAMEPLAY::IS_BIT_SET(a_0._f11D, 1)) {
        GAMEPLAY::CLEAR_BIT(&a_0._f11D, 1);
        AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
        a_1._f3 -= 1;
        if (a_1._f3 < 0) {
            a_1._f3 = 2;
        }
        sub_8ac1(sub_69d(&a_1._f1, &a_1._f3, a_1._f5, 188), a_0);
        sub_8b71(a_0);
        sub_8b63(a_0);
        sub_85d5(a_0, a_1);
    }
    if (GAMEPLAY::IS_BIT_SET(a_0._f11D, 0)) {
        GAMEPLAY::CLEAR_BIT(&a_0._f11D, 0);
        AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
        a_1._f3 += 1;
        if (a_1._f3 > 2) {
            a_1._f3 = 0;
        }
        sub_8ac1(sub_69d(&a_1._f1, &a_1._f3, a_1._f5, 187), a_0);
        sub_8b71(a_0);
        sub_8b63(a_0);
        sub_85d5(a_0, a_1);
    }
    if (GAMEPLAY::IS_BIT_SET(a_0._f11D, 2)) {
        GAMEPLAY::CLEAR_BIT(&a_0._f11D, 2);
        a_1._f1 -= 1;
        if (a_1._f1 < 0) {
            if (l_58 > 1) {
                sub_8b7f(a_0);
                a_0 = 0;
                sub_68f(a_0);
            }
            if (a_1._f5 > 0) {
                a_1._f5 -= 1;
                a_1._f1 = 2;
            } else { 
                a_1._f5 = l_58;
                a_1._f1 = 2;
                v_6 = a_1._f1 + (a_1._f3 * 3);
                if (v_6 >= l_59) {
                    a_1._f1 = (l_59 - 1) % 3;
                    a_1._f3 = (l_59 - 1) / 3;
                }
            }
        }
        AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
        sub_8ac1(sub_69d(&a_1._f1, &a_1._f3, a_1._f5, 189), a_0);
        sub_8b71(a_0);
        sub_8b63(a_0);
        sub_85d5(a_0, a_1);
    }
    if (GAMEPLAY::IS_BIT_SET(a_0._f11D, 3)) {
        GAMEPLAY::CLEAR_BIT(&a_0._f11D, 3);
        a_1._f1 += 1;
        v_7 = a_1._f1 + (a_1._f3 * 3);
        if ((a_1._f1 > 2) || ((a_1._f5 == l_58) && (v_7 >= l_59))) {
            if (l_58 > 1) {
                sub_8b7f(a_0);
                a_0 = 0;
                sub_68f(a_0);
            }
            a_1._f1 = 0;
            a_1._f5 += 1;
            if (a_1._f5 > l_58) {
                a_1._f5 = 0;
            }
        }
        AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 1);
        sub_8ac1(sub_69d(&a_1._f1, &a_1._f3, a_1._f5, 190), a_0);
        sub_8b71(a_0);
        sub_8b63(a_0);
        sub_85d5(a_0, a_1);
    }
}

void sub_68f(auto a_0) {
    a_0._f119 = 0;
}

auto sub_69d(auto a_0, auto a_1, auto a_2, auto a_3) {
    v_6 = a_0 + (a_1 * 3);
    switch (a_3) {
    case 188:
        if (a_2 == l_58) {
            if (v_6 > (l_59 - 1)) {
                a_1 = 0;
                v_6 = a_0 + (a_1 * 3);
            }
        }
        break;
    case 187:
        if (a_2 == l_58) {
            if (v_6 > (l_59 - 1)) {
                if (a_1 > 0) {
                    a_1 -= 1;
                } else { 
                    a_1 = 0;
                }
                v_6 = a_0 + (a_1 * 3);
            }
        }
        break;
    case 189:
        break;
    case 190:
        if (a_2 == l_58) {
            if (a_0 == 0) {
                for (v_7 = 0; v_7 <= 3; v_7 += 1) {
                    if (v_6 > (l_59 - 1)) {
                        a_1 -= 1;
                        v_6 = a_0 + (a_1 * 3);
                    } else { 
                        v_7 = 3;
                    }
                }
            } else if (v_6 > (l_59 - 1)) {
                if (a_0 > 0) {
                    a_0 -= 1;
                } else { 
                    a_0 = 0;
                }
                v_6 = a_0 + (a_1 * 3);
            }
        }
        break;
    }
    return v_6;
}

void sub_79c(auto a_0, auto a_1, auto a_2) {
    if (a_0._f1 == 0) {
        if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() && (!a_1)) {
            if (!a_2) {
                a_0 = NETWORK::GET_NETWORK_TIME();
            } else { 
                a_0 = NETWORK::_89023FBBF9200E9F();
            }
        } else { 
            a_0 = GAMEPLAY::GET_GAME_TIMER();
        }
        a_0._f1 = 1;
    }
}

void sub_7e1(auto a_0) {
    a_0._f1 = 0;
}

auto sub_7ee(auto a_0, auto a_1, auto a_2) {
    v_5 = CONTROLS::GET_CONTROL_VALUE(2, 195) - 127;
    v_6 = CONTROLS::GET_CONTROL_VALUE(2, 196) - 127;
    v_7 = CONTROLS::GET_CONTROL_VALUE(2, 197) - 127;
    switch (a_0) {
    case 189:
        if (v_5 < -30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    case 190:
        if (v_5 > 30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    case 188:
        if (v_6 < -30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    case 187:
        if (v_6 > 30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    case 194:
        if (v_7 > 30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    case 193:
        if (v_7 < -30) {
            if ((a_1 < GAMEPLAY::GET_GAME_TIMER()) || (a_2 == 0)) {
                a_1 = GAMEPLAY::GET_GAME_TIMER() + 250;
                return 1;
            }
        }
        break;
    }
    return 0;
}

auto sub_951(auto a_0, auto a_1, auto a_2) {
    if (a_1 == -1) {
        return 1;
    }
    sub_79c(a_0, a_2, 0);
    if (NETWORK::NETWORK_IS_GAME_IN_PROGRESS() && (!a_2)) {
        if (GAMEPLAY::ABSI(NETWORK::GET_TIME_DIFFERENCE(NETWORK::GET_NETWORK_TIME(), a_0)) >= a_1) {
            return 1;
        }
    } else if (GAMEPLAY::ABSI(NETWORK::GET_TIME_DIFFERENCE(GAMEPLAY::GET_GAME_TIMER(), a_0)) >= a_1) {
        return 1;
    }
    return 0;
}

auto sub_9af(auto a_0) {
    return a_0._f1;
}

void sub_9bb(auto a_0, auto a_1) {
    if ((GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("MPWeaponsCommon") && GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("MPWeaponsGang0")) && GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("MPWeaponsGang1")) {
        if (sub_852c(8, -1) == 0) {
            a_1 = sub_8520();
        }
        sub_86c6();
        switch (a_1._f5) {
        case 0:
            if (!a_0._f1[0/*1*/]) {
                sub_6677(${weapon_pistol}, a_0, a_1, 0);
                sub_6677(${weapon_combatpistol}, a_0, a_1, 0);
                sub_6677(${weapon_appistol}, a_0, a_1, 0);
                sub_6677(${weapon_microsmg}, a_0, a_1, 0);
                sub_6677(${weapon_smg}, a_0, a_1, 0);
                sub_6677(${weapon_assaultrifle}, a_0, a_1, 0);
                sub_6677(${weapon_carbinerifle}, a_0, a_1, 0);
                sub_6677(${weapon_advancedrifle}, a_0, a_1, 0);
                sub_6677(${weapon_mg}, a_0, a_1, 0);
            }
            break;
        case 1:
            if (!a_0._f1[0/*1*/]) {
                sub_6677(${weapon_combatmg}, a_0, a_1, 0);
                sub_6677(${weapon_assaultsmg}, a_0, a_1, 0);
                sub_6677(${weapon_pumpshotgun}, a_0, a_1, 0);
                sub_6677(${weapon_assaultshotgun}, a_0, a_1, 0);
                sub_6677(${weapon_sniperrifle}, a_0, a_1, 0);
                sub_6677(${weapon_heavysniper}, a_0, a_1, 0);
                sub_6677(${weapon_grenadelauncher}, a_0, a_1, 0);
                sub_6677(${weapon_minigun}, a_0, a_1, 0);
                sub_6677(${weapon_rpg}, a_0, a_1, 0);
            }
            break;
        case 2:
            if (!a_0._f1[0/*1*/]) {
                sub_6677(${weapon_knife}, a_0, a_1, 0);
                sub_6677(${weapon_nightstick}, a_0, a_1, 0);
                sub_6677(${weapon_bat}, a_0, a_1, 0);
                sub_6677(${weapon_crowbar}, a_0, a_1, 0);
                sub_6677(${weapon_golfclub}, a_0, a_1, 0);
                sub_6677(${weapon_molotov}, a_0, a_1, 0);
                sub_6677(${weapon_grenade}, a_0, a_1, 0);
                sub_6677(${weapon_smokegrenade}, a_0, a_1, 0);
                sub_6677(${weapon_stickybomb}, a_0, a_1, 0);
            }
            break;
        default:
            if (!a_0._f1[0/*1*/]) {
                sub_619b(a_0, a_1);
            }
            break;
        }
        sub_bfa(a_0, sub_618e(a_0));
    } else { }
}

void sub_bfa(auto a_0, auto a_1) {
    if (a_1 == 1) {
        a_0 = 0;
        sub_68f(a_0);
    }
    if (a_0 == 0) {
        for (v_4 = 0; v_4 <= 8; v_4 += 1) {
            v_9 = 0;
            if (a_0._f1[v_4/*1*/] == 1) {
                if (a_0._f55[v_4/*1*/] != 0) {
                    v_6 = sub_5d96(a_0._f55[v_4/*1*/], a_0._f114, 0);
                }
                v_7 = sub_5cc7(a_0._f55[v_4/*1*/], a_0._f114, 0);
                for (v_5 = 0; v_5 <= 8; v_5 += 1) {
                    v_8 = sub_54ab(a_0._f55[v_4/*1*/], v_5);
                    if (!v_7) {
                        sub_4804(v_8, a_0._f55[v_4/*1*/], 0, 0, 0);
                        sub_4773(v_8, a_0._f55[v_4/*1*/], 0);
                        sub_45b9(v_8, a_0._f55[v_4/*1*/], 0);
                    }
                    if (GAMEPLAY::ARE_STRINGS_EQUAL(sub_3fcf(v_8, a_0._f55[v_4/*1*/]), "WCT_CLIP1")) {
                        sub_4804(v_8, a_0._f55[v_4/*1*/], 1, 0, 0);
                        if (!v_7) {
                            sub_4773(v_8, a_0._f55[v_4/*1*/], 1);
                            sub_45b9(v_8, a_0._f55[v_4/*1*/], 1);
                        }
                    }
                    if (GAMEPLAY::ARE_STRINGS_EQUAL(sub_3fcf(v_8, a_0._f55[v_4/*1*/]), "WCT_SCOPE_LRG")) {
                        sub_4804(v_8, a_0._f55[v_4/*1*/], 1, 0, 0);
                        if (!v_7) {
                            sub_4773(v_8, a_0._f55[v_4/*1*/], 1);
                            sub_45b9(v_8, a_0._f55[v_4/*1*/], 1);
                        }
                    }
                    if (((a_0._f55[v_4/*1*/] == ${weapon_bullpupshotgun}) || (a_0._f55[v_4/*1*/] == 0x99aeeb3b)) || (a_0._f55[v_4/*1*/] == ${weapon_snspistol})) {
                        sub_4804(v_8, a_0._f55[v_4/*1*/], 1, 0, 0);
                        sub_4773(v_8, a_0._f55[v_4/*1*/], 1);
                        sub_45b9(v_8, a_0._f55[v_4/*1*/], 1);
                    }
                    if (v_7 && sub_3ed1(v_8, a_0._f55[v_4/*1*/], a_0._f114)) {
                        if (v_6 && sub_32f4(v_8, a_0._f55[v_4/*1*/], a_0._f114)) {
                            v_9 += sub_2a2b(v_8, a_0._f55[v_4/*1*/], 8);
                        }
                    } else if (v_8 != 0) {
                        v_9 += sub_2a2b(v_8, a_0._f55[v_4/*1*/], 4);
                    }
                }
            }
            v_A = 0;
            if (a_0._f55[v_4/*1*/] != 0) {
                if (v_7) {
                    if (((sub_5d96(a_0._f55[v_4/*1*/], a_0._f114, 0) || ((a_0._f55[v_4/*1*/] == ${weapon_pistol}) && WEAPON::HAS_PED_GOT_WEAPON(PLAYER::PLAYER_PED_ID(), ${weapon_pistol}, 0))) || sub_2997(a_0._f55[v_4/*1*/])) || sub_20f2(a_0._f55[v_4/*1*/], a_0._f114)) {
                        v_A += 1;
                    } else { 
                        v_A += 2;
                    }
                } else { 
                    v_A += 4;
                }
            }
            if ((a_0._f1[v_4/*1*/] == 0) || GAMEPLAY::ARE_STRINGS_EQUAL(sub_1850(a_0._f55[v_4/*1*/], 0), sub_1850(0, 0))) {
                v_A = 0;
            }
            GRAPHICS::_AB58C27C2E6123C6("SET_DATA_SLOT");
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(v_4);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(v_4);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f55[v_4/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(v_9);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(v_A);
            GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
        }
        GRAPHICS::_AB58C27C2E6123C6("DISPLAY_DATA_SLOT");
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
        GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
        a_0 = 1;
    }
    sub_17e3(a_0, sub_1843(a_0));
    sub_fd3(a_0, sub_17d6(a_0));
    sub_f66(a_0, sub_fc6(a_0));
}

void sub_f66(auto a_0, auto a_1) {
    if (a_1 == 1) {
        a_0._f117 = 0;
        sub_fb8(a_0);
    }
    if (a_0._f117 == 0) {
        GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_HIGHLIGHT");
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f115);
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(0);
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(1);
        GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(1);
        GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
        a_0._f117 = 1;
    }
}

void sub_fb8(auto a_0) {
    a_0._f11B = 0;
}

auto sub_fc6(auto a_0) {
    return a_0._f11B;
}

void sub_fd3(auto a_0, auto a_1) {
    v_4/*"16"*/ = " ";
    if (a_1 == 1) {
        a_0._f118 = 0;
        sub_17c8(a_0);
    }
    if (a_0._f118 == 0) {
        if (a_0._f115 > -1) {
            GRAPHICS::_AB58C27C2E6123C6("SET_DESCRIPTION");
            v_8 = a_0._fD7[a_0._f115/*1*/] - a_0._fA5[a_0._f115/*1*/];
            if (v_8 < 0) {
                v_8 = 0;
            }
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
            sub_17b6(&a_0._fB[a_0._f115/*4*/]);
            sub_17b6(&a_0._f30[a_0._f115/*4*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f5F[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f69[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT(a_0._f87[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT(a_0._f73[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f91[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f9B[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fA5[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fB9[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fC3[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fCD[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fE1[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(v_8);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f7D[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fAF[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._fEB[a_0._f115/*1*/]);
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(sub_130a(a_0._f55[a_0._f115/*1*/]));
            GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
            if (sub_129f(a_0._f55[a_0._f115/*1*/])) {
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6(&v_4);
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(2);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6(&v_4);
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(3);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6(&v_4);
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(4);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6(&v_4);
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(8);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6(&v_4);
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(9);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
            } else { 
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_ACCURACY");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(2);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_RANGE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(3);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_CLIPSIZE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(4);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_KD_RATIO");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(7);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_HEADSHOTS");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(8);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
                GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_TITLE");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(0);
                sub_17b6("PM_MY_ACCURACY");
                GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(9);
                GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
            }
        }
        a_0._f118 = 1;
    }
}

auto sub_129f(auto a_0) {
    switch (a_0) {
    case ${weapon_crowbar}:
    case 0x92a27487:
    case ${weapon_grenade}:
    case ${weapon_bat}:
    case ${weapon_knife}:
    case 0xab564b93:
    case 0xd8df3c3c:
    case ${weapon_bottle}:
    case ${weapon_smokegrenade}:
    case ${weapon_molotov}:
    case ${weapon_stickybomb}:
    case ${weapon_golfclub}:
    case ${weapon_hammer}:
    case ${weapon_nightstick}:
        return 1;
        break;
    }
    return 0;
}

auto sub_130a(auto a_0) {
    switch (a_0) {
    case ${weapon_pistol}:
        return 0;
        break;
    case ${weapon_knife}:
        return 0;
        break;
    case ${weapon_microsmg}:
        return 5;
        break;
    case ${weapon_assaultsmg}:
        return 29;
        break;
    case ${weapon_nightstick}:
        return 3;
        break;
    case ${weapon_combatpistol}:
        return 9;
        break;
    case ${weapon_smg}:
        return 11;
        break;
    case ${weapon_assaultrifle}:
        return 24;
        break;
    case ${weapon_sniperrifle}:
        return 21;
        break;
    case ${weapon_stickybomb}:
        return 19;
        break;
    case ${weapon_petrolcan}:
        return 20;
        break;
    case ${weapon_pumpshotgun}:
        return 17;
        break;
    case ${weapon_appistol}:
        return 33;
        break;
    case ${weapon_smokegrenade}:
        return 13;
        break;
    case ${weapon_grenade}:
        return 15;
        break;
    case ${weapon_carbinerifle}:
        if (sub_14ce(3741, -1, -1)) {
            return 0;
        } else { 
            return 42;
        }
        break;
    case ${weapon_assaultshotgun}:
        return 37;
        break;
    case ${weapon_molotov}:
        if (sub_14ce(3741, -1, -1)) {
            return 0;
        } else { 
            return 31;
        }
        break;
    case ${weapon_mg}:
        return 50;
        break;
    case ${weapon_advancedrifle}:
        return 70;
        break;
    case ${weapon_combatmg}:
        return 80;
        break;
    case ${weapon_grenadelauncher}:
        return 60;
        break;
    case ${weapon_heavysniper}:
        return 90;
        break;
    case ${weapon_rpg}:
        return 100;
        break;
    case ${weapon_minigun}:
        return 120;
        break;
    case ${weapon_sawnoffshotgun}:
        return 0;
        break;
    case ${weapon_golfclub}:
        return 0;
        break;
    case ${weapon_crowbar}:
        return 0;
        break;
    case ${weapon_bat}:
        return 0;
        break;
    }
    return 0;
}

auto sub_14ce(auto a_0, auto a_1, auto a_2) {
    v_5 = 0;
    if (a_1 == -1) {
        a_1 = sub_8520();
    }
    v_6 = sub_166b(a_0, a_1);
    v_7 = sub_150b(a_0);
    if (0 != v_6) {
        v_5 = STATS::STAT_GET_BOOL_MASKED(v_6, v_7, a_2);
    }
    return v_5;
}

auto sub_150b(auto a_0) {
    v_3 = 0;
    if ((a_0 >= 0) && (a_0 < 192)) {
        v_3 = (a_0 - 0) - (STATS::_F4D8E7AC2A27758C(a_0 - 0) * 64);
    } else if ((a_0 >= 192) && (a_0 < 384)) {
        v_3 = (a_0 - 192) - (STATS::_F4D8E7AC2A27758C(a_0 - 192) * 64);
    } else if ((a_0 >= 513) && (a_0 < 705)) {
        v_3 = (a_0 - 513) - (STATS::_F4D8E7AC2A27758C(a_0 - 513) * 64);
    } else if ((a_0 >= 705) && (a_0 < 1281)) {
        v_3 = (a_0 - 705) - (STATS::_F4D8E7AC2A27758C(a_0 - 705) * 64);
    } else if ((a_0 >= 2919) && (a_0 < 3111)) {
        v_3 = (a_0 - 2919) - (STATS::_F4D8E7AC2A27758C(a_0 - 2919) * 64);
    } else if ((a_0 >= 3111) && (a_0 < 3879)) {
        v_3 = (a_0 - 3111) - (STATS::_F4D8E7AC2A27758C(a_0 - 3111) * 64);
    } else if ((a_0 >= 5023) && (a_0 < 5087)) {
        v_3 = (a_0 - 5023) - (STATS::_F4D8E7AC2A27758C(a_0 - 5023) * 64);
    } else if ((a_0 >= 4895) && (a_0 < 5023)) {
        v_3 = (a_0 - 4895) - (STATS::_F4D8E7AC2A27758C(a_0 - 4895) * 64);
    }
    return v_3;
}

auto sub_166b(auto a_0, auto a_1) {
    if (a_1 == -1) {
        a_1 = sub_8520();
    }
    v_4 = 0;
    if ((a_0 >= 0) && (a_0 < 192)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 0, 0, 1, a_1);
    } else if ((a_0 >= 192) && (a_0 < 384)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 192, 1, 1, a_1);
    } else if ((a_0 >= 513) && (a_0 < 705)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 513, 0, 0, 0);
    } else if ((a_0 >= 705) && (a_0 < 1281)) {
        v_4 = STATS::_80C75307B1C42837(a_0 - 705, 1, 0, 0);
    } else if ((a_0 >= 2919) && (a_0 < 3111)) {
        v_4 = STATS::_C4BB08EE7907471E(a_0 - 2919, 0, 0, 0);
    } else if ((a_0 >= 3111) && (a_0 < 3879)) {
        v_4 = STATS::_C4BB08EE7907471E(a_0 - 3111, 0, 1, a_1);
    } else if ((a_0 >= 5023) && (a_0 < 5087)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 5023, 0, 0, 0, "_NGPSTAT_BOOL");
    } else if ((a_0 >= 4895) && (a_0 < 5023)) {
        v_4 = STATS::_BA52FF538ED2BC71(a_0 - 4895, 0, 1, a_1, "_NGPSTAT_BOOL");
    }
    return v_4;
}

void sub_17b6(auto a_0) {
    GRAPHICS::_BEGIN_TEXT_COMPONENT(a_0);
    GRAPHICS::_END_TEXT_COMPONENT();
}

void sub_17c8(auto a_0) {
    a_0._f11C = 0;
}

auto sub_17d6(auto a_0) {
    return a_0._f11C;
}

void sub_17e3(auto a_0, auto a_1) {
    if (a_1 == 1) {
        a_0._f116 = 0;
        sub_1835(a_0);
    }
    if (a_0._f116 == 0) {
        if (a_0._f113 != 9999) {
            GRAPHICS::_AB58C27C2E6123C6("SET_INPUT_EVENT");
            GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0._f113);
            GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
            a_0._f113 = 9999;
            a_0._f116 = 1;
        }
    }
}

void sub_1835(auto a_0) {
    a_0._f11A = 0;
}

auto sub_1843(auto a_0) {
    return a_0._f11A;
}

auto sub_1850(auto a_0, auto a_1) {
    switch (a_0) {
    case 0:
        if (a_1) {
            return "WTU_INVALID";
        } else { 
            return "WT_INVALID";
        }
        break;
    case ${weapon_unarmed}:
        if (a_1) {
            return "WTU_UNARMED";
        } else { 
            return "WT_UNARMED";
        }
        break;
    case ${weapon_pistol}:
        if (a_1) {
            return "WTU_PIST";
        } else { 
            return "WT_PIST";
        }
        break;
    case ${weapon_combatpistol}:
        if (a_1) {
            return "WTU_PIST_CBT";
        } else { 
            return "WT_PIST_CBT";
        }
        break;
    case ${weapon_appistol}:
        if (a_1) {
            return "WTU_PIST_AP";
        } else { 
            return "WT_PIST_AP";
        }
        break;
    case ${weapon_smg}:
        if (a_1) {
            return "WTU_SMG";
        } else { 
            return "WT_SMG";
        }
        break;
    case ${weapon_microsmg}:
        if (a_1) {
            return "WTU_SMG_MCR";
        } else { 
            return "WT_SMG_MCR";
        }
        break;
    case ${weapon_assaultrifle}:
        if (a_1) {
            return "WTU_RIFLE_ASL";
        } else { 
            return "WT_RIFLE_ASL";
        }
        break;
    case ${weapon_carbinerifle}:
        if (a_1) {
            return "WTU_RIFLE_CBN";
        } else { 
            return "WT_RIFLE_CBN";
        }
        break;
    case ${weapon_advancedrifle}:
        if (a_1) {
            return "WTU_RIFLE_ADV";
        } else { 
            return "WT_RIFLE_ADV";
        }
        break;
    case ${weapon_mg}:
        if (a_1) {
            return "WTU_MG";
        } else { 
            return "WT_MG";
        }
        break;
    case ${weapon_combatmg}:
        if (a_1) {
            return "WTU_MG_CBT";
        } else { 
            return "WT_MG_CBT";
        }
        break;
    case ${weapon_pumpshotgun}:
        if (a_1) {
            return "WTU_SG_PMP";
        } else { 
            return "WT_SG_PMP";
        }
        break;
    case ${weapon_sawnoffshotgun}:
        if (a_1) {
            return "WTU_SG_SOF";
        } else { 
            return "WT_SG_SOF";
        }
        break;
    case ${weapon_assaultshotgun}:
        if (a_1) {
            return "WTU_SG_ASL";
        } else { 
            return "WT_SG_ASL";
        }
        break;
    case ${weapon_heavysniper}:
        if (a_1) {
            return "WTU_SNIP_HVY";
        } else { 
            return "WT_SNIP_HVY";
        }
        break;
    case ${weapon_remotesniper}:
        if (a_1) {
            return "WTU_SNIP_RMT";
        } else { 
            return "WT_SNIP_RMT";
        }
        break;
    case ${weapon_sniperrifle}:
        if (a_1) {
            return "WTU_SNIP_RIF";
        } else { 
            return "WT_SNIP_RIF";
        }
        break;
    case ${weapon_grenadelauncher}:
        if (a_1) {
            return "WTU_GL";
        } else { 
            return "WT_GL";
        }
        break;
    case ${weapon_rpg}:
        if (a_1) {
            return "WTU_RPG";
        } else { 
            return "WT_RPG";
        }
        break;
    case ${weapon_minigun}:
        if (a_1) {
            return "WTU_MINIGUN";
        } else { 
            return "WT_MINIGUN";
        }
        break;
    case ${weapon_grenade}:
        if (a_1) {
            return "WTU_GNADE";
        } else { 
            return "WT_GNADE";
        }
        break;
    case ${weapon_smokegrenade}:
        if (a_1) {
            return "WTU_GNADE_SMK";
        } else { 
            return "WT_GNADE_SMK";
        }
        break;
    case ${weapon_stickybomb}:
        if (a_1) {
            return "WTU_GNADE_STK";
        } else { 
            return "WT_GNADE_STK";
        }
        break;
    case ${weapon_molotov}:
        if (a_1) {
            return "WTU_MOLOTOV";
        } else { 
            return "WT_MOLOTOV";
        }
        break;
    case ${weapon_stungun}:
        if (a_1) {
            return "WTU_STUN";
        } else { 
            return "WT_STUN";
        }
        break;
    case ${weapon_petrolcan}:
        if (a_1) {
            return "WTU_PETROL";
        } else { 
            return "WT_PETROL";
        }
        break;
    case ${weapon_electric_fence}:
        if (a_1) {
            return "WTU_ELCFEN";
        } else { 
            return "WT_ELCFEN";
        }
        break;
    case ${vehicle_weapon_tank}:
        if (a_1) {
            return "WTU_V_TANK";
        } else { 
            return "WT_V_TANK";
        }
        break;
    case ${vehicle_weapon_space_rocket}:
        if (a_1) {
            return "WTU_V_SPACERKT";
        } else { 
            return "WT_V_SPACERKT";
        }
        break;
    case ${vehicle_weapon_player_laser}:
        if (a_1) {
            return "WTU_V_PLRLSR";
        } else { 
            return "WT_V_PLRLSR";
        }
        break;
    case ${object}:
        if (a_1) {
            return "WTU_OBJECT";
        } else { 
            return "WT_OBJECT";
        }
        break;
    case ${gadget_parachute}:
        if (a_1) {
            return "WTU_PARA";
        } else { 
            return "WT_PARA";
        }
        break;
    case ${ammo_rpg}:
        if (a_1) {
            return "WTU_A_RPG";
        } else { 
            return "WT_A_RPG";
        }
        break;
    case ${ammo_tank}:
        if (a_1) {
            return "WTU_A_TANK";
        } else { 
            return "WT_A_TANK";
        }
        break;
    case ${ammo_space_rocket}:
        if (a_1) {
            return "WTU_A_SPACERKT";
        } else { 
            return "WT_A_SPACERKT";
        }
        break;
    case ${ammo_player_laser}:
        if (a_1) {
            return "WTU_A_PLRLSR";
        } else { 
            return "WT_A_PLRLSR";
        }
        break;
    case ${ammo_enemy_laser}:
        if (a_1) {
            return "WTU_A_ENMYLSR";
        } else { 
            return "WT_A_ENMYLSR";
        }
        break;
    case ${weapon_knife}:
        if (a_1) {
            return "WTU_KNIFE";
        } else { 
            return "WT_KNIFE";
        }
        break;
    case ${weapon_nightstick}:
        if (a_1) {
            return "WTU_NGTSTK";
        } else { 
            return "WT_NGTSTK";
        }
        break;
    case ${weapon_hammer}:
        if (a_1) {
            return "WTU_HAMMER";
        } else { 
            return "WT_HAMMER";
        }
        break;
    case ${weapon_bat}:
        if (a_1) {
            return "WTU_BAT";
        } else { 
            return "WT_BAT";
        }
        break;
    case ${weapon_crowbar}:
        if (a_1) {
            return "WTU_CROWBAR";
        } else { 
            return "WT_CROWBAR";
        }
        break;
    case ${weapon_golfclub}:
        if (a_1) {
            return "WTU_GOLFCLUB";
        } else { 
            return "WT_GOLFCLUB";
        }
        break;
    case ${weapon_rammed_by_car}:
        if (a_1) {
            return "WTU_PIST";
        } else { 
            return "WT_PIST";
        }
        break;
    case ${weapon_run_over_by_car}:
        if (a_1) {
            return "WTU_PIST";
        } else { 
            return "WT_PIST";
        }
        break;
    case ${weapon_assaultsmg}:
        if (a_1) {
            return "WTU_SMG_ASL";
        } else { 
            return "WT_SMG_ASL";
        }
        break;
    case ${weapon_bullpupshotgun}:
        if (a_1) {
            return "WTU_SG_BLP";
        } else { 
            return "WT_SG_BLP";
        }
        break;
    case 0x99aeeb3b:
        if (a_1) {
            return "WTU_PIST_50";
        } else { 
            return "WT_PIST_50";
        }
        break;
    case ${weapon_bottle}:
        if (a_1) {
            return "WTU_BOTTLE";
        } else { 
            return "WT_BOTTLE";
        }
        break;
    case 0x61012683:
        if (a_1) {
            return "WTU_GUSENBERG";
        } else { 
            return "WT_GUSENBERG";
        }
        break;
    case ${weapon_snspistol}:
        if (a_1) {
            return "WTU_SNSPISTOL";
        } else { 
            return "WT_SNSPISTOL";
        }
        break;
    case 0x83839c4:
        if (a_1) {
            return "WTU_VPISTOL";
        } else { 
            return "WT_VPISTOL";
        }
        break;
    case 0x92a27487:
        if (a_1) {
            return "WTU_DAGGER";
        } else { 
            return "WT_DAGGER";
        }
        break;
    case 0x47757124:
        if (a_1) {
            return "WTU_FLAREGUN";
        } else { 
            return "WT_FLAREGUN";
        }
        break;
    case ${weapon_heavypistol}:
        if (a_1) {
            return "WTU_HEAVYPSTL";
        } else { 
            return "WT_HEAVYPSTL";
        }
        break;
    case ${weapon_specialcarbine}:
        if (a_1) {
            return "WTU_RIFLE_SCBN";
        } else { 
            return "WT_RIFLE_SCBN";
        }
        break;
    case 0xa89cb99e:
        if (a_1) {
            return "WTU_MUSKET";
        } else { 
            return "WT_MUSKET";
        }
        break;
    case 0x7f7497e5:
        if (a_1) {
            return "WTU_FWRKLNCHR";
        } else { 
            return "WT_FWRKLNCHR";
        }
        break;
    case 0xc734385a:
        if (a_1) {
            return "WTU_MKRIFLE";
        } else { 
            return "WT_MKRIFLE";
        }
        break;
    case 0x3aabbbaa:
        if (a_1) {
            return "WTU_HVYSHOT";
        } else { 
            return "WT_HVYSHOT";
        }
        break;
    case 0xab564b93:
        if (a_1) {
            return "WTU_PRXMINE";
        } else { 
            return "WT_PRXMINE";
        }
        break;
    case 0x63ab0442:
        if (a_1) {
            return "WTU_HOMLNCH";
        } else { 
            return "WT_HOMLNCH";
        }
        break;
    case 0xf9dcbf2d:
        if (a_1) {
            return "WTU_HATCHET";
        } else { 
            return "WT_HATCHET";
        }
        break;
    case 0xa3d4d34:
        if (a_1) {
            return "WTU_COMBATPDW";
        } else { 
            return "WT_COMBATPDW";
        }
        break;
    case 0xd8df3c3c:
        if (a_1) {
            return "WTU_KNUCKLE";
        } else { 
            return "WT_KNUCKLE";
        }
        break;
    case 0xdc4db296:
        if (a_1) {
            return "WTU_MKPISTOL";
        } else { 
            return "WT_MKPISTOL";
        }
        break;
    default:
        if (sub_20b7(a_0, &v_4) != -1) {
            if (a_1) {
                return sub_20ad(&v_4._f1F);
            } else { 
                return sub_20ad(&v_4._f7);
            }
        }
        break;
    }
    return "WT_INVALID";
}

auto sub_20ad(auto a_0) {
    return a_0;
}

auto sub_20b7(auto a_0, auto a_1) {
    v_5 = DLC1::GET_NUM_DLC_WEAPONS();
    for (v_4 = 0; v_4 < v_5; v_4 += 1) {
        if (DLC1::GET_DLC_WEAPON_DATA(v_4, a_1)) {
            if (a_1._f1 == a_0) {
                return v_4;
            }
        }
    }
    return -1;
}

auto sub_20f2(auto a_0, auto a_1) {
    if (sub_2957() == 0) {
        return 0;
    }
    if (sub_294b()) {
        return 0;
    }
    v_4 = sub_2649(a_0);
    if ((v_4 != 236) && sub_261d(v_4, -1)) {
        return 1;
    } else { 
        return 0;
    }
    v_5 = sub_2507(a_0, a_1);
    v_6 = sub_2163(a_0);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

auto sub_2156(auto a_0) {
    return a_0 % 32;
}

auto sub_2163(auto a_0) {
    return sub_2171(a_0);
}

auto sub_2171(auto a_0) {
    switch (a_0) {
    case ${weapon_unarmed}:
        return 0;
        break;
    case ${weapon_pistol}:
        return 1;
        break;
    case ${weapon_combatpistol}:
        return 2;
        break;
    case ${weapon_appistol}:
        return 3;
        break;
    case 0x99aeeb3b:
        return 4;
        break;
    case ${weapon_smg}:
        return 5;
        break;
    case ${weapon_assaultsmg}:
        return 6;
        break;
    case ${weapon_microsmg}:
        return 7;
        break;
    case ${weapon_assaultrifle}:
        return 8;
        break;
    case ${weapon_carbinerifle}:
        return 9;
        break;
    case ${weapon_heavyrifle}:
        return 10;
        break;
    case ${weapon_advancedrifle}:
        return 11;
        break;
    case ${weapon_mg}:
        return 12;
        break;
    case ${weapon_combatmg}:
        return 13;
        break;
    case ${weapon_assaultmg}:
        return 14;
        break;
    case ${weapon_stickybomb}:
        return 15;
        break;
    case ${weapon_grenade}:
        return 16;
        break;
    case ${weapon_smokegrenade}:
        return 17;
        break;
    case ${weapon_remotesniper}:
        return 18;
        break;
    case ${weapon_assaultsniper}:
        return 19;
        break;
    case ${weapon_sniperrifle}:
        return 20;
        break;
    case ${weapon_heavysniper}:
        return 21;
        break;
    case ${weapon_pumpshotgun}:
        return 22;
        break;
    case ${weapon_bullpupshotgun}:
        return 23;
        break;
    case ${weapon_assaultshotgun}:
        return 24;
        break;
    case ${weapon_sawnoffshotgun}:
        return 25;
        break;
    case ${weapon_grenadelauncher}:
        return 26;
        break;
    case ${weapon_rpg}:
        return 27;
        break;
    case ${weapon_minigun}:
        return 28;
        break;
    case ${weapon_loudhailer}:
        return 29;
        break;
    case ${weapon_programmablear}:
        return 30;
        break;
    case ${weapon_stungun}:
        return 31;
        break;
    case ${weapon_rubbergun}:
        return 32;
        break;
    case ${gadget_parachute}:
        return 33;
        break;
    case ${weapon_knife}:
        return 34;
        break;
    case ${weapon_nightstick}:
        return 35;
        break;
    case ${weapon_hammer}:
        return 36;
        break;
    case ${weapon_bat}:
        return 37;
        break;
    case ${weapon_crowbar}:
        return 38;
        break;
    case ${weapon_golfclub}:
        return 39;
        break;
    case ${weapon_grenadelauncher_smoke}:
        return 40;
        break;
    case ${weapon_molotov}:
        return 41;
        break;
    case ${weapon_fireextinguisher}:
        return 42;
        break;
    case ${weapon_petrolcan}:
        return 43;
        break;
    case ${weapon_digiscanner}:
        return 44;
        break;
    case ${weapon_bottle}:
        return 45;
        break;
    case ${weapon_specialcarbine}:
        return 46;
        break;
    case ${weapon_snspistol}:
        return 47;
        break;
    case ${weapon_heavypistol}:
        return 49;
        break;
    case ${weapon_bullpuprifle}:
        return 48;
        break;
    case 0x61012683:
        return 50;
        break;
    case 0x92a27487:
        return 51;
        break;
    case 0x83839c4:
        return 52;
        break;
    case 0x47757124:
        return 57;
        break;
    case 0xa89cb99e:
        return 53;
        break;
    case 0x7f7497e5:
        return 54;
        break;
    case 0xc734385a:
        return 56;
        break;
    case 0x3aabbbaa:
        return 55;
        break;
    case 0xab564b93:
        return 60;
        break;
    case 0x63ab0442:
        return 61;
        break;
    case 0xf9dcbf2d:
        return 58;
        break;
    case 0x6d544c99:
        return 59;
        break;
    case 0xa3d4d34:
        return 64;
        break;
    case 0xd8df3c3c:
        return 62;
        break;
    case 0xdc4db296:
        return 63;
        break;
    }
    return 0;
}

auto sub_2507(auto a_0, auto a_1) {
    v_4 = sub_2520(sub_2586(a_0), a_1, 0);
    return v_4;
}

auto sub_2520(auto a_0, auto a_1, auto a_2) {
    if (a_2 == 0) {}
    v_5 = g_25743C[a_0/*6*/][sub_2552(a_1)/*1*/];
    if (STATS::STAT_GET_INT(v_5, &v_6, -1)) {
        return v_6;
    }
    return 0;
}

auto sub_2552(auto a_0) {
    v_3 = a_0;
    if (v_3 == -1) {
        v_4 = sub_8520();
        if (v_4 > -1) {
            g_25731D = 0;
            v_3 = v_4;
        } else { 
            v_3 = 0;
            g_25731D = 1;
        }
    }
    return v_3;
}

auto sub_2586(auto a_0) {
    v_3 = sub_2163(a_0);
    v_4 = sub_2610(v_3);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_4) {
        case 0:
            return 677;
            break;
        case 1:
            return 678;
            break;
        case 2:
            return 2379;
            break;
        }
    }
    return 3015;
}

auto sub_2605() {
    return g_5F7D;
}

auto sub_2610(auto a_0) {
    return a_0 / 32;
}

auto sub_261d(auto a_0, auto a_1) {
    v_4 = g_25C07C[a_0/*6*/][sub_2552(a_1)/*1*/];
    if (STATS::STAT_GET_BOOL(v_4, &v_5, -1)) {
        return v_5;
    }
    return 0;
}

auto sub_2649(auto a_0) {
    switch (a_0) {
    case ${weapon_pistol}:
        return 17;
        break;
    case ${weapon_combatpistol}:
        return 19;
        break;
    case ${weapon_appistol}:
        return 23;
        break;
    case 0x99aeeb3b:
        return 21;
        break;
    case ${weapon_smg}:
        return 27;
        break;
    case ${weapon_microsmg}:
        return 25;
        break;
    case ${weapon_assaultrifle}:
        return 31;
        break;
    case ${weapon_carbinerifle}:
        return 33;
        break;
    case ${weapon_advancedrifle}:
        return 35;
        break;
    case ${weapon_mg}:
        return 37;
        break;
    case ${weapon_combatmg}:
        return 39;
        break;
    case ${weapon_pumpshotgun}:
        return 43;
        break;
    case ${weapon_sawnoffshotgun}:
        return 45;
        break;
    case ${weapon_assaultshotgun}:
        return 49;
        break;
    case ${weapon_heavysniper}:
        return 55;
        break;
    case ${weapon_sniperrifle}:
        return 53;
        break;
    case ${weapon_grenadelauncher}:
        return 59;
        break;
    case ${weapon_rpg}:
        return 61;
        break;
    case ${weapon_minigun}:
        return 63;
        break;
    case ${weapon_grenade}:
        return 65;
        break;
    case ${weapon_smokegrenade}:
        return 67;
        break;
    case ${weapon_stickybomb}:
        return 69;
        break;
    case ${weapon_molotov}:
        return 71;
        break;
    case ${weapon_petrolcan}:
        return 74;
        break;
    case ${gadget_parachute}:
        return 73;
        break;
    case ${weapon_knife}:
        return 1;
        break;
    case ${weapon_nightstick}:
        return 3;
        break;
    case ${weapon_hammer}:
        return 11;
        break;
    case ${weapon_bat}:
        return 13;
        break;
    case ${weapon_crowbar}:
        return 5;
        break;
    case ${weapon_golfclub}:
        return 15;
        break;
    case ${weapon_assaultmg}:
        return 41;
        break;
    case ${weapon_assaultsmg}:
        return 29;
        break;
    case ${weapon_assaultsniper}:
        return 57;
        break;
    case ${weapon_bullpupshotgun}:
        return 47;
        break;
    case ${weapon_bottle}:
        return 142;
        break;
    case ${weapon_specialcarbine}:
        return 169;
        break;
    case ${weapon_snspistol}:
        return 144;
        break;
    case ${weapon_heavypistol}:
        return 167;
        break;
    case ${weapon_bullpuprifle}:
        return 171;
        break;
    case 0x61012683:
        return 173;
        break;
    case 0x83839c4:
        return 196;
        break;
    case 0x92a27487:
        return 194;
        break;
    case 0xa89cb99e:
        return 200;
        break;
    case 0x7f7497e5:
        return 198;
        break;
    case 0x47757124:
        return 190;
        break;
    case 0x3aabbbaa:
        return 212;
        break;
    case 0xc734385a:
        return 214;
        break;
    case 0xab564b93:
        return 218;
        break;
    case 0x63ab0442:
        return 220;
        break;
    case 0xf9dcbf2d:
        return 216;
        break;
    case 0xa3d4d34:
        return 222;
        break;
    case 0xd8df3c3c:
        return 224;
        break;
    case 0xdc4db296:
        return 226;
        break;
    }
    return 236;
}

auto sub_294b() {
    return g_141424;
}

auto sub_2957() {
    if (sub_2985() && sub_2975(0)) {
        return 1;
    }
    return 0;
}

auto sub_2975(auto a_0) {
    return g_140671[a_0/*1*/];
}

auto sub_2985() {
    return sub_2975(sub_8520() + 1);
}

auto sub_2997(auto a_0) {
    switch (a_0) {
    case ${weapon_molotov}:
        v_3 = 1;
        v_6 = 485;
        break;
    case ${weapon_golfclub}:
        v_3 = 1;
        v_6 = 239;
        break;
    case ${weapon_bat}:
        v_3 = 1;
        v_6 = 232;
        break;
    case ${weapon_crowbar}:
        v_3 = 1;
        v_6 = 204;
        break;
    }
    if (v_3) {
        v_4 = sub_2a16(PLAYER::PLAYER_ID());
        v_5 = sub_130a(a_0);
        if (v_4 >= v_5) {
            if (sub_2520(v_6, -1, 0) > 0) {
                return 1;
            }
        }
    }
    return 0;
}

auto sub_2a16(auto a_0) {
    return g_182715[a_0/*332*/]._fBC._f6;
}

auto sub_2a2b(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_2c2b(a_0, a_1);
    switch (v_5) {
    case 1:
        switch (a_2) {
        case 4:
            return 2;
            break;
        case 1:
            return 1;
            break;
        case 8:
            return 4;
            break;
        }
        break;
    case 2:
        switch (a_2) {
        case 4:
            return 16;
            break;
        case 1:
            return 8;
            break;
        case 8:
            return 32;
            break;
        }
        break;
    case 4:
        switch (a_2) {
        case 4:
            return 128;
            break;
        case 1:
            return 64;
            break;
        case 8:
            return 256;
            break;
        }
        break;
    case 8:
        switch (a_2) {
        case 4:
            return 1024;
            break;
        case 1:
            return 512;
            break;
        case 8:
            return 2048;
            break;
        }
        break;
    case 16:
        switch (a_2) {
        case 4:
            return 8192;
            break;
        case 1:
            return 4096;
            break;
        case 8:
            return 16384;
            break;
        }
        break;
    case 32:
        switch (a_2) {
        case 4:
            return 65536;
            break;
        case 1:
            return 32768;
            break;
        case 8:
            return 131072;
            break;
        }
        break;
    case 64:
        switch (a_2) {
        case 4:
            return 524288;
            break;
        case 1:
            return 262144;
            break;
        case 8:
            return 0x100000;
            break;
        }
        break;
    case 128:
        switch (a_2) {
        case 4:
            return 0x400000;
            break;
        case 1:
            return 0x200000;
            break;
        case 8:
            return 0x800000;
            break;
        }
        break;
    }
    return 0;
}

auto sub_2c2b(auto a_0, auto a_1) {
    switch (a_1) {
    case ${weapon_pistol}:
        switch (a_0) {
        case 0xfed0fd71:
            return 16;
        case 0xed265a1c:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case 0x65ea7ebb:
            return 1;
            break;
        }
        break;
    case 0x99aeeb3b:
        switch (a_0) {
        case 0x2297be19:
            return 16;
        case 0xd9d3ac92:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case ${component_at_ar_supp_02}:
            return 1;
            break;
        }
        break;
    case ${weapon_combatpistol}:
        switch (a_0) {
        case 0x721b079:
            return 16;
        case 0xd67b4f2d:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case ${component_at_pi_supp}:
            return 1;
            break;
        }
        break;
    case ${weapon_appistol}:
        switch (a_0) {
        case 0x31c4b22a:
            return 16;
        case 0x249a17d5:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case ${component_at_pi_supp}:
            return 1;
            break;
        }
        break;
    case ${weapon_microsmg}:
        switch (a_0) {
        case 0xcb48aef0:
            return 16;
        case 0x10e6ba2b:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case ${component_at_scope_macro}:
            return 64;
        case ${component_at_ar_supp_02}:
            return 1;
            break;
        }
        break;
    case ${weapon_assaultsmg}:
        switch (a_0) {
        case 0x8d1307b0:
            return 16;
        case 0xbb46e417:
            return 32;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_supp_02}:
            return 1;
        case ${component_at_scope_macro}:
            return 64;
            break;
        }
        break;
    case ${weapon_smg}:
        switch (a_0) {
        case 0x26574997:
            return 16;
        case 0x350966fb:
            return 32;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_pi_supp}:
            return 1;
        case 0x3cc6ba57:
            return 64;
            break;
        }
        break;
    case ${weapon_assaultrifle}:
        switch (a_0) {
        case 0xbe5eea16:
            return 16;
        case 0xb1214f9b:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_macro}:
            return 64;
        case ${component_at_ar_supp_02}:
            return 1;
            break;
        }
        break;
    case ${weapon_carbinerifle}:
        switch (a_0) {
        case 0x9fbe33ec:
            return 16;
        case 0x91109691:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_medium}:
            return 64;
        case ${component_at_ar_supp}:
            return 1;
            break;
        }
        break;
    case ${weapon_specialcarbine}:
        switch (a_0) {
        case ${component_specialcarbine_clip_01}:
            return 16;
        case ${component_specialcarbine_clip_02}:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_medium}:
            return 64;
        case ${component_at_ar_supp_02}:
            return 1;
        }
        break;
    case ${weapon_bullpuprifle}:
        switch (a_0) {
        case ${component_bullpuprifle_clip_01}:
            return 16;
        case ${component_bullpuprifle_clip_02}:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_small}:
            return 64;
        case ${component_at_ar_supp}:
            return 1;
        }
        break;
    case ${weapon_heavypistol}:
        switch (a_0) {
        case ${component_heavypistol_clip_01}:
            return 16;
        case ${component_heavypistol_clip_02}:
            return 32;
        case ${component_at_pi_flsh}:
            return 2;
        case ${component_at_pi_supp}:
            return 1;
        }
        break;
    case ${weapon_snspistol}:
        switch (a_0) {
        case ${component_snspistol_clip_01}:
            return 16;
        case ${component_snspistol_clip_02}:
            return 32;
        }
        break;
    case ${weapon_advancedrifle}:
        switch (a_0) {
        case 0xfa8fa10f:
            return 16;
        case 0x8ec1c979:
            return 32;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_small}:
            return 64;
        case ${component_at_ar_supp}:
            return 1;
            break;
        }
        break;
    case ${weapon_mg}:
        switch (a_0) {
        case 0xf434ef84:
            return 16;
        case 0x82158b47:
            return 32;
        case 0x3c00afed:
            return 64;
            break;
        }
        break;
    case ${weapon_combatmg}:
        switch (a_0) {
        case 0xe1ffb34a:
            return 16;
        case 0xd6c59cd6:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_scope_medium}:
            return 64;
            break;
        }
        break;
    case ${weapon_pumpshotgun}:
        switch (a_0) {
        case ${component_at_sr_supp}:
            return 1;
        case ${component_at_ar_flsh}:
            return 2;
            break;
        }
        break;
    case ${weapon_assaultshotgun}:
        switch (a_0) {
        case 0x94e81bc7:
            return 16;
        case 0x86bd7f72:
            return 32;
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_supp}:
            return 1;
            break;
        }
        break;
    case ${weapon_bullpupshotgun}:
        switch (a_0) {
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_supp_02}:
            return 1;
            break;
        }
        break;
    case ${weapon_sniperrifle}:
        switch (a_0) {
        case ${component_at_scope_max}:
            return 4;
        case ${component_at_scope_large}:
            return 64;
        case ${component_at_ar_supp_02}:
            return 1;
            break;
        }
        break;
    case ${weapon_heavysniper}:
        switch (a_0) {
        case ${component_at_scope_max}:
            return 4;
        case ${component_at_scope_large}:
            return 64;
            break;
        }
        break;
    case ${weapon_grenadelauncher}:
        switch (a_0) {
        case ${component_at_ar_afgrip}:
            return 128;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_scope_small}:
            return 64;
            break;
        }
        break;
    case 0x83839c4:
        switch (a_0) {
        case 0x45a3b6bb:
            return 16;
        case 0x33ba12e8:
            return 32;
        case ${component_at_pi_supp}:
            return 1;
            break;
        }
        break;
    case 0x61012683:
        switch (a_0) {
        case 0x1ce5a6a5:
            return 16;
        case 0xeac8c270:
            return 32;
            break;
        }
        break;
    case 0x3aabbbaa:
        switch (a_0) {
        case 0x324f2d5f:
            return 16;
        case 0x971cf6fd:
            return 32;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_supp_02}:
            return 1;
        case ${component_at_ar_afgrip}:
            return 128;
            break;
        }
        break;
    case 0xc734385a:
        switch (a_0) {
        case 0xd83b4141:
            return 16;
        case 0xccfd2ac5:
            return 32;
        case 0x1c221b1a:
            return 64;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_supp}:
            return 1;
        case ${component_at_ar_afgrip}:
            return 128;
            break;
        }
        break;
    case 0xdc4db296:
        switch (a_0) {
        case 0xcb9e41ed:
            return 16;
            break;
        }
        break;
    case 0xa3d4d34:
        switch (a_0) {
        case 0x4317f19e:
            return 16;
        case 0x334a5203:
            return 32;
        case ${component_at_scope_small}:
            return 64;
        case ${component_at_ar_flsh}:
            return 2;
        case ${component_at_ar_afgrip}:
            return 128;
            break;
        }
        break;
    }
    return 0;
}

auto sub_32f4(auto a_0, auto a_1, auto a_2) {
    if (sub_294b()) {
        return 0;
    }
    v_5 = sub_3e08(a_0, a_1, a_2);
    v_6 = sub_3329(a_0, a_1);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

auto sub_3329(auto a_0, auto a_1) {
    return sub_3339(a_0, a_1);
}

auto sub_3339(auto a_0, auto a_1) {
    switch (a_1) {
    case ${weapon_pistol}:
        switch (a_0) {
        case 0xfed0fd71:
            return 1;
            break;
        case 0xed265a1c:
            return 2;
            break;
        case ${component_at_pi_flsh}:
            return 3;
            break;
        case 0x65ea7ebb:
            return 4;
            break;
        case 0xd7391086:
            return 175;
            break;
        }
        break;
    case ${weapon_combatpistol}:
        switch (a_0) {
        case 0x721b079:
            return 5;
            break;
        case 0xd67b4f2d:
            return 6;
            break;
        case ${component_at_pi_flsh}:
            return 7;
            break;
        case ${component_at_pi_supp}:
            return 8;
            break;
        }
        break;
    case ${weapon_appistol}:
        switch (a_0) {
        case 0x31c4b22a:
            return 11;
            break;
        case 0x249a17d5:
            return 12;
            break;
        case ${component_at_pi_flsh}:
            return 13;
            break;
        case ${component_at_pi_supp}:
            return 14;
            break;
        case 0x9b76c72c:
            return 164;
            break;
        }
        break;
    case ${weapon_microsmg}:
        switch (a_0) {
        case 0xcb48aef0:
            return 15;
            break;
        case 0x10e6ba2b:
            return 16;
            break;
        case ${component_at_pi_flsh}:
            return 17;
            break;
        case ${component_at_scope_macro}:
            return 18;
            break;
        case ${component_at_ar_supp_02}:
            return 19;
            break;
        case 0x487aae09:
            return 174;
            break;
        }
        break;
    case ${weapon_smg}:
        switch (a_0) {
        case 0x26574997:
            return 22;
            break;
        case 0x350966fb:
            return 23;
            break;
        case ${component_at_ar_flsh}:
            return 24;
            break;
        case 0x3cc6ba57:
            return 25;
            break;
        case ${component_at_pi_supp}:
            return 26;
            break;
        case 0x27872c90:
            return 179;
            break;
        }
        break;
    case ${weapon_assaultrifle}:
        switch (a_0) {
        case 0xbe5eea16:
            return 27;
            break;
        case 0xb1214f9b:
            return 28;
            break;
        case ${component_at_ar_afgrip}:
            return 29;
            break;
        case ${component_at_ar_flsh}:
            return 30;
            break;
        case ${component_at_scope_macro}:
            return 31;
            break;
        case ${component_at_ar_supp_02}:
            return 32;
            break;
        case 0x4ead7533:
            return 165;
            break;
        }
        break;
    case ${weapon_carbinerifle}:
        switch (a_0) {
        case 0x9fbe33ec:
            return 33;
            break;
        case 0x91109691:
            return 34;
            break;
        case 0x75414f30:
            return 35;
            break;
        case ${component_at_ar_afgrip}:
            return 36;
            break;
        case ${component_at_ar_flsh}:
            return 37;
            break;
        case ${component_at_scope_medium}:
            return 38;
            break;
        case ${component_at_ar_supp}:
            return 39;
            break;
        case 0xd89b9658:
            return 168;
            break;
        }
        break;
    case ${weapon_advancedrifle}:
        switch (a_0) {
        case 0xfa8fa10f:
            return 44;
            break;
        case 0x8ec1c979:
            return 45;
            break;
        case ${component_at_ar_flsh}:
            return 47;
            break;
        case ${component_at_scope_small}:
            return 48;
            break;
        case ${component_at_ar_supp}:
            return 49;
            break;
        case 0x377cd377:
            return 163;
            break;
        }
        break;
    case ${weapon_mg}:
        switch (a_0) {
        case 0xf434ef84:
            return 50;
            break;
        case 0x82158b47:
            return 51;
            break;
        case 0x3c00afed:
            return 52;
            break;
        }
        break;
    case ${weapon_combatmg}:
        switch (a_0) {
        case 0xe1ffb34a:
            return 53;
            break;
        case 0xd6c59cd6:
            return 54;
            break;
        case ${component_at_ar_afgrip}:
            return 55;
            break;
        case ${component_at_scope_medium}:
            return 56;
            break;
        }
        break;
    case ${weapon_pumpshotgun}:
        switch (a_0) {
        case ${component_at_sr_supp}:
            return 59;
            break;
        case ${component_at_ar_flsh}:
            return 60;
            break;
        }
        break;
    case ${weapon_assaultshotgun}:
        switch (a_0) {
        case 0x94e81bc7:
            return 64;
            break;
        case 0x86bd7f72:
            return 65;
            break;
        case ${component_at_ar_afgrip}:
            return 66;
            break;
        case ${component_at_ar_flsh}:
            return 67;
            break;
        case ${component_at_ar_supp}:
            return 68;
            break;
        }
        break;
    case ${weapon_sniperrifle}:
        switch (a_0) {
        case 0x9bc64089:
            return 69;
            break;
        case ${component_at_scope_large}:
            return 70;
            break;
        case ${component_at_scope_max}:
            return 71;
            break;
        case ${component_at_ar_supp_02}:
            return 72;
            break;
        case 0x4032b5e7:
            return 180;
            break;
        }
        break;
    case ${weapon_heavysniper}:
        switch (a_0) {
        case 0x476f52f4:
            return 76;
            break;
        case ${component_at_scope_max}:
            return 77;
            break;
        case ${component_at_scope_large}:
            return 82;
            break;
        }
        break;
    case ${weapon_grenadelauncher}:
        switch (a_0) {
        case ${component_at_ar_afgrip}:
            return 78;
            break;
        case ${component_at_ar_flsh}:
            return 79;
            break;
        case ${component_at_scope_small}:
            return 80;
            break;
        }
        break;
    case ${weapon_minigun}:
        switch (a_0) {
        case 0xc8de6f06:
            return 81;
            break;
        }
        break;
    case ${weapon_assaultsmg}:
        switch (a_0) {
        case 0x8d1307b0:
            return 83;
            break;
        case 0xbb46e417:
            return 84;
            break;
        case ${component_at_ar_flsh}:
            return 85;
            break;
        case ${component_at_scope_macro}:
            return 86;
            break;
        case ${component_at_ar_supp_02}:
            return 87;
            break;
        }
        break;
    case ${weapon_bullpupshotgun}:
        switch (a_0) {
        case ${component_at_ar_afgrip}:
            return 88;
            break;
        case ${component_at_ar_flsh}:
            return 89;
            break;
        case ${component_at_ar_supp_02}:
            return 90;
            break;
        }
        break;
    case 0x99aeeb3b:
        switch (a_0) {
        case 0x2297be19:
            return 91;
            break;
        case 0xd9d3ac92:
            return 92;
            break;
        case ${component_at_pi_flsh}:
            return 93;
            break;
        case ${component_at_ar_supp_02}:
            return 94;
            break;
        case 0x77b8ab2f:
            return 176;
            break;
        }
        break;
    case ${weapon_assaultsniper}:
        switch (a_0) {
        case 0xbaab157:
            return 95;
            break;
        case ${component_at_scope_large}:
            return 96;
            break;
        case ${component_at_scope_max}:
            return 97;
            break;
        case ${component_at_ar_supp}:
            return 98;
            break;
        }
        break;
    case ${weapon_heavyrifle}:
        switch (a_0) {
        case 0x5af49386:
            return 99;
            break;
        case 0x6cbf371b:
            return 100;
            break;
        case ${component_at_ar_afgrip}:
            return 101;
            break;
        case ${component_at_ar_flsh}:
            return 102;
            break;
        case ${component_at_scope_medium}:
            return 103;
            break;
        case ${component_at_ar_supp}:
            return 104;
            break;
        }
        break;
    case ${weapon_assaultmg}:
        switch (a_0) {
        case 0xcaebd246:
            return 105;
            break;
        case 0xe1c5fffa:
            return 106;
            break;
        case ${component_at_ar_afgrip}:
            return 107;
            break;
        case ${component_at_scope_medium}:
            return 108;
            break;
        }
        break;
    case ${weapon_programmablear}:
        switch (a_0) {
        case 0xf8955d89:
            return 109;
            break;
        case 0x3e7e6956:
            return 110;
            break;
        }
        break;
    case ${weapon_specialcarbine}:
        switch (a_0) {
        case ${component_specialcarbine_clip_01}:
            return 111;
            break;
        case ${component_specialcarbine_clip_02}:
            return 112;
            break;
        case ${component_at_ar_afgrip}:
            return 113;
            break;
        case ${component_at_ar_flsh}:
            return 114;
            break;
        case ${component_at_scope_medium}:
            return 115;
            break;
        case ${component_at_ar_supp_02}:
            return 116;
            break;
        }
        break;
    case ${weapon_snspistol}:
        switch (a_0) {
        case ${component_snspistol_clip_01}:
            return 117;
            break;
        case ${component_snspistol_clip_02}:
            return 118;
            break;
        case ${component_at_pi_flsh}:
            return 119;
            break;
        case ${component_at_pi_supp}:
            return 120;
            break;
        }
        break;
    case ${weapon_heavypistol}:
        switch (a_0) {
        case ${component_heavypistol_clip_01}:
            return 121;
            break;
        case ${component_heavypistol_clip_02}:
            return 122;
            break;
        case ${component_at_pi_flsh}:
            return 123;
            break;
        case ${component_at_pi_supp}:
            return 124;
            break;
        case 0x7a6a7b7b:
            return 171;
            break;
        }
        break;
    case ${weapon_bullpuprifle}:
        switch (a_0) {
        case ${component_bullpuprifle_clip_01}:
            return 131;
            break;
        case ${component_bullpuprifle_clip_02}:
            return 132;
            break;
        case ${component_at_ar_flsh}:
            return 127;
            break;
        case ${component_at_ar_supp}:
            return 128;
            break;
        case ${component_at_scope_small}:
            return 129;
            break;
        case ${component_at_ar_afgrip}:
            return 130;
            break;
        }
        break;
    case 0x61012683:
        switch (a_0) {
        case 0x1ce5a6a5:
            return 125;
            break;
        case 0xeac8c270:
            return 126;
            break;
        }
        break;
    case 0x83839c4:
        switch (a_0) {
        case 0x45a3b6bb:
            return 133;
            break;
        case 0x33ba12e8:
            return 134;
            break;
        case ${component_at_pi_flsh}:
            return 135;
            break;
        case ${component_at_pi_supp}:
            return 136;
            break;
        }
        break;
    case 0x3aabbbaa:
        switch (a_0) {
        case 0x324f2d5f:
            return 137;
            break;
        case 0x971cf6fd:
            return 140;
            break;
        case ${component_at_ar_flsh}:
            return 145;
            break;
        case ${component_at_ar_supp_02}:
            return 146;
            break;
        case ${component_at_ar_afgrip}:
            return 147;
            break;
        }
        break;
    case 0xc734385a:
        switch (a_0) {
        case 0xd83b4141:
            return 138;
            break;
        case 0xccfd2ac5:
            return 139;
            break;
        case 0x1c221b1a:
            return 141;
            break;
        case ${component_at_ar_flsh}:
            return 142;
            break;
        case ${component_at_ar_supp}:
            return 143;
            break;
        case ${component_at_ar_afgrip}:
            return 144;
            break;
        case 0x161e9241:
            return 172;
            break;
        }
        break;
    case 0xa3d4d34:
        switch (a_0) {
        case 0x4317f19e:
            return 149;
            break;
        case 0x334a5203:
            return 150;
            break;
        case ${component_at_ar_flsh}:
            return 151;
            break;
        case ${component_at_scope_small}:
            return 152;
            break;
        case ${component_at_ar_afgrip}:
            return 153;
            break;
        }
        break;
    case ${weapon_sawnoffshotgun}:
        switch (a_0) {
        case 0x85a64df9:
            return 178;
            break;
        }
        break;
    case 0xdc4db296:
        switch (a_0) {
        case 0xcb9e41ed:
            return 148;
            break;
        }
        break;
    case 0xd8df3c3c:
        switch (a_0) {
        case 0xc613f685:
            return 154;
            break;
        case 0xeed9fd63:
            return 155;
            break;
        case 0x50910c31:
            return 156;
            break;
        case 0x9761d9dc:
            return 157;
            break;
        case 0x7decfe30:
            return 158;
            break;
        case 0x3f4e8aa6:
            return 159;
            break;
        case 0x8b808bb:
            return 160;
            break;
        case 0xe28babef:
            return 161;
            break;
        case 0x7af3f785:
            return 162;
            break;
        }
        break;
    }
    return 0;
}

auto sub_3e08(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_2520(sub_3e23(a_0, a_1), a_2, 0);
    return v_5;
}

auto sub_3e23(auto a_0, auto a_1) {
    v_4 = sub_3329(a_0, a_1);
    v_5 = sub_2610(v_4);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_5) {
        case 0:
            return 802;
            break;
        case 1:
            return 803;
            break;
        case 2:
            return 804;
            break;
        case 3:
            return 805;
            break;
        case 4:
            return 1741;
            break;
        case 5:
            return 2393;
            break;
        }
    }
    return 3015;
}

auto sub_3ed1(auto a_0, auto a_1, auto a_2) {
    if (sub_294b()) {
        return 0;
    }
    v_5 = sub_3f06(a_0, a_1, a_2);
    v_6 = sub_3329(a_0, a_1);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

auto sub_3f06(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_2520(sub_3f21(a_0, a_1), a_2, 0);
    return v_5;
}

auto sub_3f21(auto a_0, auto a_1) {
    v_4 = sub_3329(a_0, a_1);
    v_5 = sub_2610(v_4);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_5) {
        case 0:
            return 673;
            break;
        case 1:
            return 674;
            break;
        case 2:
            return 675;
            break;
        case 3:
            return 676;
            break;
        case 4:
            return 1740;
            break;
        case 5:
            return 2392;
            break;
        }
    }
    return 1740;
}

auto sub_3fcf(auto a_0, auto a_1) {
    if (a_1 == 0xd8df3c3c) {
        switch (a_0) {
        case 0xf3462f33:
            return "WT_KNUCKLE";
            break;
        case 0xc613f685:
            return "WCT_KNUCK_02";
            break;
        case 0xeed9fd63:
            return "WCT_KNUCK_BG";
            break;
        case 0x50910c31:
            return "WCT_KNUCK_DLR";
            break;
        case 0x9761d9dc:
            return "WCT_KNUCK_DMD";
            break;
        case 0x7decfe30:
            return "WCT_KNUCK_HT";
            break;
        case 0x3f4e8aa6:
            return "WCT_KNUCK_LV";
            break;
        case 0x8b808bb:
            return "WCT_KNUCK_PC";
            break;
        case 0xe28babef:
            return "WCT_KNUCK_SLG";
            break;
        case 0x7af3f785:
            return "WCT_KNUCK_VG";
            break;
        }
    }
    switch (a_0) {
    case 0:
        return "WCT_INVALID";
        break;
    case 0x75414f30:
        return "WCT_RAIL";
        break;
    case ${component_at_ar_afgrip}:
        return "WCT_GRIP";
        break;
    case ${component_at_pi_flsh}:
        return "WCT_FLASH";
        break;
    case ${component_at_ar_flsh}:
        return "WCT_FLASH";
        break;
    case ${component_at_scope_macro}:
        return "WCT_SCOPE_MAC";
        break;
    case 0x3cc6ba57:
        return "WCT_SCOPE_MAC";
        break;
    case ${component_at_scope_small}:
        return "WCT_SCOPE_SML";
        break;
    case 0x3c00afed:
        return "WCT_SCOPE_SML";
        break;
    case ${component_at_scope_medium}:
        return "WCT_SCOPE_MED";
        break;
    case ${component_at_scope_large}:
        return "WCT_SCOPE_LRG";
        break;
    case ${component_at_scope_max}:
        return "WCT_SCOPE_MAX";
        break;
    case ${component_at_pi_supp}:
        return "WCT_SUPP";
        break;
    case ${component_at_ar_supp}:
        return "WCT_SUPP";
        break;
    case ${component_at_ar_supp_02}:
        return "WCT_SUPP";
        break;
    case ${component_at_sr_supp}:
        return "WCT_SUPP";
        break;
    case 0xfed0fd71:
        return "WCT_CLIP1";
        break;
    case 0xed265a1c:
        return "WCT_CLIP2";
        break;
    case 0x721b079:
        return "WCT_CLIP1";
        break;
    case 0xd67b4f2d:
        return "WCT_CLIP2";
        break;
    case 0x31c4b22a:
        return "WCT_CLIP1";
        break;
    case 0x249a17d5:
        return "WCT_CLIP2";
        break;
    case 0xcb48aef0:
        return "WCT_CLIP1";
        break;
    case 0x10e6ba2b:
        return "WCT_CLIP2";
        break;
    case 0x26574997:
        return "WCT_CLIP1";
        break;
    case 0x350966fb:
        return "WCT_CLIP2";
        break;
    case 0xbe5eea16:
        return "WCT_CLIP1";
        break;
    case 0xb1214f9b:
        return "WCT_CLIP2";
        break;
    case 0x9fbe33ec:
        return "WCT_CLIP1";
        break;
    case 0x91109691:
        return "WCT_CLIP2";
        break;
    case 0xfa8fa10f:
        return "WCT_CLIP1";
        break;
    case 0x8ec1c979:
        return "WCT_CLIP2";
        break;
    case 0xf434ef84:
        return "WCT_CLIP1";
        break;
    case 0x82158b47:
        return "WCT_CLIP2";
        break;
    case 0xe1ffb34a:
        return "WCT_CLIP1";
        break;
    case 0xd6c59cd6:
        return "WCT_CLIP2";
        break;
    case 0x94e81bc7:
        return "WCT_CLIP1";
        break;
    case 0x86bd7f72:
        return "WCT_CLIP2";
        break;
    case 0x9bc64089:
        return "WCT_CLIP1";
        break;
    case 0x476f52f4:
        return "WCT_CLIP1";
        break;
    case 0xc8de6f06:
        return "WCT_CLIP2";
        break;
    case 0x8d1307b0:
        return "WCT_CLIP1";
        break;
    case 0xbb46e417:
        return "WCT_CLIP2";
        break;
    case 0x2297be19:
        return "WCT_CLIP1";
        break;
    case 0xd9d3ac92:
        return "WCT_CLIP2";
        break;
    case 0xbaab157:
        return "WCT_CLIP1";
        break;
    case 0x5af49386:
        return "WCT_CLIP1";
        break;
    case 0x6cbf371b:
        return "WCT_CLIP2";
        break;
    case 0xcaebd246:
        return "WCT_CLIP1";
        break;
    case 0xe1c5fffa:
        return "WCT_CLIP2";
        break;
    case 0xf8955d89:
        return "WCT_CLIP1";
        break;
    case 0x3e7e6956:
        return "WCT_CLIP2";
        break;
    case ${component_snspistol_clip_01}:
        return "WCT_CLIP1";
        break;
    case ${component_snspistol_clip_02}:
        return "WCT_CLIP2";
        break;
    case 0x45a3b6bb:
        return "WCT_CLIP1";
        break;
    case 0x33ba12e8:
        return "WCT_CLIP2";
        break;
    case 0x324f2d5f:
        return "WCT_CLIP1";
        break;
    case 0xd83b4141:
        return "WCT_CLIP1";
        break;
    case 0x971cf6fd:
        return "WCT_CLIP2";
        break;
    case 0xccfd2ac5:
        return "WCT_CLIP2";
        break;
    case 0x1c221b1a:
        return "WCT_SCOPE_LRG";
        break;
    case 0x65ea7ebb:
        return "WCT_SUPP";
        break;
    case 0x4317f19e:
        return "WCT_CLIP1";
        break;
    case 0x334a5203:
        return "WCT_CLIP2";
        break;
    case 0xcb9e41ed:
        return "WCT_CLIP1";
        break;
    case 0x4ead7533:
        return "WCT_VAR_GOLD";
        break;
    case 0x377cd377:
        return "WCT_VAR_METAL";
        break;
    case 0xd89b9658:
        return "WCT_VAR_GOLD";
        break;
    case 0x9b76c72c:
        return "WCT_VAR_METAL";
        break;
    case 0xd7391086:
        return "WCT_VAR_GOLD";
        break;
    case 0x77b8ab2f:
        return "WCT_VAR_SIL";
        break;
    case 0x7a6a7b7b:
        return "WCT_VAR_WOOD";
        break;
    case 0x27872c90:
        return "WCT_VAR_GOLD";
        break;
    case 0x487aae09:
        return "WCT_VAR_GOLD";
        break;
    case 0x85a64df9:
        return "WCT_VAR_METAL";
        break;
    case 0x4032b5e7:
        return "WCT_VAR_WOOD";
        break;
    case 0x161e9241:
        return "WCT_VAR_GOLD";
        break;
    default:
        if (a_1 != 0) {
            v_4 = sub_20b7(a_1, &v_6);
            if (v_4 != -1) {
                for (v_5 = 0; v_5 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_4); v_5 += 1) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_4, v_5, &v_2D)) {
                        if (v_2D._f3 == a_0) {
                            return sub_20ad(&v_2D._f6);
                        }
                    }
                }
            }
        }
        break;
    }
    return "WCT_INVALID";
}

void sub_45b9(auto a_0, auto a_1, auto a_2) {
    if (a_2) {
        if (!sub_473e(a_0, a_1, -1)) {
            sub_45f4(a_0, a_1, 1);
        }
    } else if (sub_473e(a_0, a_1, -1)) {
        sub_45f4(a_0, a_1, 0);
    }
}

void sub_45f4(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_4723(a_0, a_1, -1);
    v_6 = sub_3329(a_0, a_1);
    if (v_6 > -1) {
        if (a_2) {
            GAMEPLAY::SET_BIT(&v_5, sub_2156(v_6));
        } else { 
            GAMEPLAY::CLEAR_BIT(&v_5, sub_2156(v_6));
        }
        sub_464a(sub_4675(a_0, a_1), v_5, -1, 1);
    } else { }
}

void sub_464a(auto a_0, auto a_1, auto a_2, auto a_3) {
    v_6 = g_25743C[a_0/*6*/][sub_2552(a_2)/*1*/];
    if (v_6 != 0) {
        STATS::STAT_SET_INT(v_6, a_1, a_3);
    }
}

auto sub_4675(auto a_0, auto a_1) {
    v_4 = sub_3329(a_0, a_1);
    v_5 = sub_2610(v_4);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_5) {
        case 0:
            return 679;
            break;
        case 1:
            return 680;
            break;
        case 2:
            return 681;
            break;
        case 3:
            return 682;
            break;
        case 4:
            return 1743;
            break;
        case 5:
            return 2395;
            break;
        }
    }
    return 1743;
}

auto sub_4723(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_2520(sub_4675(a_0, a_1), a_2, 0);
    return v_5;
}

auto sub_473e(auto a_0, auto a_1, auto a_2) {
    if (sub_294b()) {
        return 0;
    }
    v_5 = sub_4723(a_0, a_1, a_2);
    v_6 = sub_3329(a_0, a_1);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

void sub_4773(auto a_0, auto a_1, auto a_2) {
    if (a_2) {
        if (!sub_32f4(a_0, a_1, -1)) {
            sub_47ae(a_0, a_1, 1);
        }
    } else if (sub_32f4(a_0, a_1, -1)) {
        sub_47ae(a_0, a_1, 0);
    }
}

void sub_47ae(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_3e08(a_0, a_1, -1);
    v_6 = sub_3329(a_0, a_1);
    if (v_6 > -1) {
        if (a_2) {
            GAMEPLAY::SET_BIT(&v_5, sub_2156(v_6));
        } else { 
            GAMEPLAY::CLEAR_BIT(&v_5, sub_2156(v_6));
        }
        sub_464a(sub_3e23(a_0, a_1), v_5, -1, 1);
    } else { }
}

void sub_4804(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4) {
    if (a_2) {
        if (!sub_3ed1(a_0, a_1, -1)) {
            sub_5455(a_0, a_1, 1);
        }
        if (a_3) {
            if (sub_5410(a_0, a_1) == 0) {
                sub_4ad7(16, sub_3fcf(a_0, 0), sub_4f7c(a_0, 0), sub_4d89(a_1), sub_4b96(a_1), -1, 0, 0, 0, -1);
                sub_4a1b(a_0, a_1, 1);
            }
        }
        if (a_4) {
            sub_488c(a_0, a_1, 1);
        }
    } else if (sub_3ed1(a_0, a_1, -1)) {
        sub_5455(a_0, a_1, 0);
    }
}

void sub_488c(auto a_0, auto a_1, auto a_2) {
    if (a_2) {
        if (!sub_49e6(a_0, a_1, -1)) {
            sub_48c7(a_0, a_1, 1);
        }
    } else if (sub_49e6(a_0, a_1, -1)) {
        sub_48c7(a_0, a_1, 0);
    }
}

void sub_48c7(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_49cb(a_0, a_1, -1);
    v_6 = sub_3329(a_0, a_1);
    if (v_6 > -1) {
        if (a_2) {
            GAMEPLAY::SET_BIT(&v_5, sub_2156(v_6));
        } else { 
            GAMEPLAY::CLEAR_BIT(&v_5, sub_2156(v_6));
        }
        sub_464a(sub_491d(a_0, a_1), v_5, -1, 1);
    } else { }
}

auto sub_491d(auto a_0, auto a_1) {
    v_4 = sub_3329(a_0, a_1);
    v_5 = sub_2610(v_4);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_5) {
        case 0:
            return 646;
            break;
        case 1:
            return 647;
            break;
        case 2:
            return 648;
            break;
        case 3:
            return 649;
            break;
        case 4:
            return 1742;
            break;
        case 5:
            return 2394;
            break;
        }
    }
    return 3015;
}

auto sub_49cb(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_2520(sub_491d(a_0, a_1), a_2, 0);
    return v_5;
}

auto sub_49e6(auto a_0, auto a_1, auto a_2) {
    if (sub_294b()) {
        return 0;
    }
    v_5 = sub_49cb(a_0, a_1, a_2);
    v_6 = sub_3329(a_0, a_1);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

void sub_4a1b(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_3329(a_0, a_1);
    if (v_5 > -1) {
        if (a_2) {
            GAMEPLAY::SET_BIT(&g_256EEB._f3DF[sub_4a74(a_0, a_1)/*1*/], sub_2156(v_5));
        } else { 
            GAMEPLAY::CLEAR_BIT(&g_256EEB._f3DF[sub_4a74(a_0, a_1)/*1*/], sub_2156(v_5));
        }
    } else { }
}

auto sub_4a74(auto a_0, auto a_1) {
    v_4 = sub_3329(a_0, a_1);
    switch (sub_2610(v_4)) {
    case 0:
        return 0;
        break;
    case 1:
        return 1;
        break;
    case 2:
        return 2;
        break;
    case 3:
        return 3;
    case 4:
        return 4;
    case 5:
        return 5;
    }
    return 0;
}

void sub_4ad7(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5, auto a_6, auto a_7, auto a_8, auto a_9) {
    v_C = sub_4b67(&g_14552F);
    g_14552F[v_C/*105*/] = a_0;
    g_14552F[v_C/*105*/]._f11/*"64"*/ = a_3;
    g_14552F[v_C/*105*/]._f1/*"64"*/ = a_4;
    g_14552F[v_C/*105*/]._f21/*"64"*/ = a_1;
    g_14552F[v_C/*105*/]._f31/*"64"*/ = a_2;
    g_14552F[v_C/*105*/]._f61 = a_5;
    g_14552F[v_C/*105*/]._f68 = a_9;
    if (a_6 != 0) {}
    if (a_7 != 0) {}
    if (!GAMEPLAY::IS_STRING_NULL_OR_EMPTY(a_8)) {
        g_14552F[v_C/*105*/]._f62/*"24"*/ = a_8;
    }
}

auto sub_4b67(auto a_0) {
    for (v_4 = 0; v_4 <= 9; v_4 += 1) {
        if (a_0[v_4/*105*/] == 0) {
            v_3 = v_4;
            v_4 = 10;
        }
    }
    return v_3;
}

auto sub_4b96(auto a_0) {
    switch (a_0) {
    case ${weapon_knife}:
        return "MPWeaponsUnusedForNow";
        break;
    case ${weapon_stungun}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_pistol}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_appistol}:
        return "MPWeaponsGang1_small";
        break;
    case ${gadget_parachute}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_smg}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_sniperrifle}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_carbinerifle}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_specialcarbine}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_snspistol}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_pumpshotgun}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_grenade}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_stickybomb}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_grenadelauncher}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_combatmg}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_assaultshotgun}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_rpg}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_heavysniper}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_advancedrifle}:
        return "MPWeaponsGang0_small";
        break;
    case ${weapon_microsmg}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_assaultrifle}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_mg}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_sawnoffshotgun}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_minigun}:
        return "MPWeaponsGang1_small";
        break;
    case ${weapon_combatpistol}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_smokegrenade}:
        return "MPWeaponsCommon_small";
        break;
    case ${ammo_space_rocket}:
        return "MPWeaponsCommon_small";
        break;
    case ${vehicle_weapon_space_rocket}:
        return "MPWeaponsCommon_small";
        break;
    case ${weapon_molotov}:
        return "MPWeaponsUnusedForNow";
        break;
    case ${weapon_petrolcan}:
        return "MPWeaponsUnusedForNow";
        break;
    }
    return "";
}

auto sub_4d89(auto a_0) {
    switch (a_0) {
    case ${weapon_knife}:
        return "W_ME_KNIFE_01";
        break;
    case ${weapon_stungun}:
        return "W_PI_Stungun";
        break;
    case ${weapon_pistol}:
        return "W_PI_Pistol";
        break;
    case ${gadget_parachute}:
        return "Parachute_Main";
        break;
    case ${weapon_smg}:
        return "W_SB_SMG";
        break;
    case ${weapon_sniperrifle}:
        return "W_SR_SniperRifle";
        break;
    case ${weapon_carbinerifle}:
        return "W_AR_CarbineRifle";
        break;
    case ${weapon_specialcarbine}:
        return "W_AR_DLC_SpecialCarbine";
        break;
    case ${weapon_snspistol}:
        return "W_AR_DLC_SNSPISTOL";
        break;
    case ${weapon_pumpshotgun}:
        return "W_SG_PumpShotgun";
        break;
    case ${weapon_grenade}:
        return "W_Ex_GrenadeFrag";
        break;
    case ${weapon_stickybomb}:
        return "W_Ex_PE";
        break;
    case ${weapon_grenadelauncher}:
        return "W_R_GrenadeLauncher";
        break;
    case ${weapon_combatmg}:
        return "W_MG_CombatMG";
        break;
    case ${weapon_assaultshotgun}:
        return "W_SG_AssaultShotgun";
        break;
    case ${weapon_appistol}:
        return "W_PI_AppPistol";
        break;
    case ${weapon_rpg}:
        return "W_LR_RPG";
        break;
    case ${weapon_heavysniper}:
        return "W_SR_HeavySniper";
        break;
    case ${weapon_advancedrifle}:
        return "W_AR_AdvancedRifle";
        break;
    case ${weapon_microsmg}:
        return "W_SB_MicroSMG";
        break;
    case ${weapon_assaultrifle}:
        return "W_AR_AssaultRifle";
        break;
    case ${weapon_mg}:
        return "W_MG_MG";
        break;
    case ${weapon_sawnoffshotgun}:
        return "W_SG_SAWNOFF";
        break;
    case ${weapon_minigun}:
        return "W_MG_Minigun";
        break;
    case ${weapon_combatpistol}:
        return "W_PI_CombatPistol";
        break;
    case ${weapon_smokegrenade}:
        return "W_Ex_GrenadeSmoke";
        break;
    case ${weapon_petrolcan}:
        return "W_AM_Jerrycan";
        break;
    case ${weapon_molotov}:
        return "W_EX_Molotov";
        break;
    case ${ammo_space_rocket}:
        return "rocket";
        break;
    case ${vehicle_weapon_space_rocket}:
        return "rocket";
        break;
    }
    return "";
}

auto sub_4f7c(auto a_0, auto a_1) {
    switch (a_0) {
    case 0:
        return "WCD_INVALID";
        break;
    case 0x75414f30:
        return "WCD_AT_RAIL";
        break;
    case ${component_at_ar_afgrip}:
        return "WCD_GRIP";
        break;
    case ${component_at_pi_flsh}:
        return "WCD_FLASH";
        break;
    case ${component_at_ar_flsh}:
        return "WCD_FLASH";
        break;
    case ${component_at_scope_macro}:
        return "WCD_SCOPE_MAC";
        break;
    case 0x3cc6ba57:
        return "WCD_SCOPE_MAC";
        break;
    case ${component_at_scope_small}:
        return "WCD_SCOPE_SML";
        break;
    case 0x3c00afed:
        return "WCD_SCOPE_SML";
        break;
    case ${component_at_scope_medium}:
        return "WCD_SCOPE_MED";
        break;
    case ${component_at_scope_large}:
        return "WCD_SCOPE_LRG";
        break;
    case ${component_at_scope_max}:
        return "WCD_SCOPE_MAX";
        break;
    case ${component_at_pi_supp}:
        return "WCD_PI_SUPP";
        break;
    case 0x65ea7ebb:
        return "WCD_PI_SUPP";
        break;
    case ${component_at_ar_supp}:
        return "WCD_AR_SUPP";
        break;
    case ${component_at_ar_supp_02}:
        return "WCD_AR_SUPP2";
        break;
    case ${component_at_sr_supp}:
        return "WCD_SR_SUPP";
        break;
    case 0xfed0fd71:
        return "WCD_P_CLIP1";
        break;
    case 0xed265a1c:
        return "WCD_P_CLIP2";
        break;
    case 0x721b079:
        return "WCD_CP_CLIP1";
        break;
    case 0xd67b4f2d:
        return "WCD_CP_CLIP2";
        break;
    case 0x31c4b22a:
        return "WCD_AP_CLIP1";
        break;
    case 0x249a17d5:
        return "WCD_AP_CLIP2";
        break;
    case 0xcb48aef0:
        return "WCDMSMG_CLIP1";
        break;
    case 0x10e6ba2b:
        return "WCDMSMG_CLIP2";
        break;
    case 0x26574997:
        return "WCD_SMG_CLIP1";
        break;
    case 0x350966fb:
        return "WCD_SMG_CLIP2";
        break;
    case 0xbe5eea16:
        return "WCD_AR_CLIP1";
        break;
    case 0xb1214f9b:
        return "WCD_AR_CLIP2";
        break;
    case 0x9fbe33ec:
        return "WCD_CR_CLIP1";
        break;
    case 0x91109691:
        return "WCD_CR_CLIP2";
        break;
    case 0xfa8fa10f:
        return "WCD_ADR_CLIP1";
        break;
    case 0x8ec1c979:
        return "WCD_ADR_CLIP2";
        break;
    case 0xf434ef84:
        return "WCD_MG_CLIP1";
        break;
    case 0x82158b47:
        return "WCD_MG_CLIP2";
        break;
    case 0xe1ffb34a:
        return "WCDCMG_CLIP1";
        break;
    case 0xd6c59cd6:
        return "WCDCMG_CLIP2";
        break;
    case 0x94e81bc7:
        return "WCD_AS_CLIP1";
        break;
    case 0x86bd7f72:
        return "WCD_AS_CLIP2";
        break;
    case 0x9bc64089:
        return "WCD_SR_CLIP1";
        break;
    case 0x476f52f4:
        return "WCD_HS_CLIP1";
        break;
    case 0xc8de6f06:
        return "WCD_MIG_CLIP2";
        break;
    case 0x8d1307b0:
        return "WCD_ASMG_CLIP1";
        break;
    case 0xbb46e417:
        return "WCD_ASMG_CLIP2";
        break;
    case 0x2297be19:
        return "WCD_P50_CLIP1";
        break;
    case 0xd9d3ac92:
        return "WCD_P50_CLIP2";
        break;
    case 0x4ead7533:
        return "WCD_VAR_AR";
        break;
    case 0x377cd377:
        return "WCD_VAR_ADR";
        break;
    case 0xd89b9658:
        return "WCD_VAR_CR";
        break;
    case 0x9b76c72c:
        return "WCD_VAR_AP";
        break;
    case 0xd7391086:
        return "WCD_VAR_P";
        break;
    case 0x77b8ab2f:
        return "WCD_VAR_P50";
        break;
    case 0x7a6a7b7b:
        return "WCD_VAR_HPST";
        break;
    case 0x27872c90:
        return "WCD_VAR_SMG";
        break;
    case 0x487aae09:
        return "WCD_VAR_MSMG";
        break;
    case 0x85a64df9:
        return "WCD_VAR_SOF";
        break;
    case 0x4032b5e7:
        return "WCD_VAR_SNP";
        break;
    case 0x161e9241:
        return "WCD_VAR_MKRF";
        break;
    case 0xc613f685:
        return "WCD_VAR_DESC";
        break;
    case 0xeed9fd63:
        return "WCD_VAR_DESC";
        break;
    case 0x50910c31:
        return "WCD_VAR_DESC";
        break;
    case 0x9761d9dc:
        return "WCD_VAR_DESC";
        break;
    case 0x7decfe30:
        return "WCD_VAR_DESC";
        break;
    case 0x3f4e8aa6:
        return "WCD_VAR_DESC";
        break;
    case 0x8b808bb:
        return "WCD_VAR_DESC";
        break;
    case 0xe28babef:
        return "WCD_VAR_DESC";
        break;
    case 0x7af3f785:
        return "WCD_VAR_DESC";
        break;
    default:
        if (a_1 != 0) {
            v_4 = sub_20b7(a_1, &v_6);
            if (v_4 != -1) {
                for (v_5 = 0; v_5 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_4); v_5 += 1) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_4, v_5, &v_2D)) {
                        if (v_2D._f3 == a_0) {
                            return sub_20ad(&v_2D._fE);
                        }
                    }
                }
            }
        }
        break;
    }
    return "WCD_INVALID";
}

auto sub_5410(auto a_0, auto a_1) {
    v_4 = sub_5438(a_0, a_1);
    v_5 = sub_3329(a_0, a_1);
    return GAMEPLAY::IS_BIT_SET(v_4, sub_2156(v_5));
}

auto sub_5438(auto a_0, auto a_1) {
    v_4 = g_256EEB._f3DF[sub_4a74(a_0, a_1)/*1*/];
    return v_4;
}

void sub_5455(auto a_0, auto a_1, auto a_2) {
    v_5 = sub_3f06(a_0, a_1, -1);
    v_6 = sub_3329(a_0, a_1);
    if (v_6 > -1) {
        if (a_2) {
            GAMEPLAY::SET_BIT(&v_5, sub_2156(v_6));
        } else { 
            GAMEPLAY::CLEAR_BIT(&v_5, sub_2156(v_6));
        }
        sub_464a(sub_3f21(a_0, a_1), v_5, -1, 1);
    } else { }
}

auto sub_54ab(auto a_0, auto a_1) {
    v_4 = 0;
    switch (a_0) {
    case ${weapon_pistol}:
        switch (a_1) {
        case 0:
            v_4 = 0xfed0fd71;
            break;
        case 1:
            v_4 = 0xed265a1c;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = 0x65ea7ebb;
            break;
        case 4:
            v_4 = 0xd7391086;
            break;
        }
        break;
    case ${weapon_combatpistol}:
        switch (a_1) {
        case 0:
            v_4 = 0x721b079;
            break;
        case 1:
            v_4 = 0xd67b4f2d;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        }
        break;
    case ${weapon_appistol}:
        switch (a_1) {
        case 0:
            v_4 = 0x31c4b22a;
            break;
        case 1:
            v_4 = 0x249a17d5;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        case 4:
            v_4 = 0x9b76c72c;
            break;
        }
        break;
    case ${weapon_microsmg}:
        switch (a_1) {
        case 0:
            v_4 = 0xcb48aef0;
            break;
        case 1:
            v_4 = 0x10e6ba2b;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_macro};
            break;
        case 4:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 5:
            v_4 = 0x487aae09;
            break;
        }
        break;
    case ${weapon_smg}:
        switch (a_1) {
        case 0:
            v_4 = 0x26574997;
            break;
        case 1:
            v_4 = 0x350966fb;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_pi_supp};
            break;
        case 4:
            v_4 = 0x3cc6ba57;
            break;
        case 5:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 6:
            v_4 = 0x27872c90;
            break;
        }
        break;
    case ${weapon_assaultrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0xbe5eea16;
            break;
        case 1:
            v_4 = 0xb1214f9b;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_ar_flsh};
            break;
        case 4:
            v_4 = ${component_at_scope_macro};
            break;
        case 5:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 6:
            v_4 = 0x4ead7533;
            break;
        }
        break;
    case ${weapon_carbinerifle}:
        switch (a_1) {
        case 0:
            v_4 = 0x9fbe33ec;
            break;
        case 1:
            v_4 = 0x91109691;
            break;
        case 2:
            v_4 = 0x75414f30;
            break;
        case 3:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 4:
            v_4 = ${component_at_ar_flsh};
            break;
        case 5:
            v_4 = ${component_at_scope_medium};
            break;
        case 6:
            v_4 = ${component_at_ar_supp};
            break;
        case 7:
            v_4 = 0xd89b9658;
            break;
        }
        break;
    case ${weapon_advancedrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0xfa8fa10f;
            break;
        case 1:
            v_4 = 0x8ec1c979;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_small};
            break;
        case 4:
            v_4 = ${component_at_ar_supp};
            break;
        case 5:
            v_4 = 0x377cd377;
            break;
        }
        break;
    case ${weapon_mg}:
        switch (a_1) {
        case 0:
            v_4 = 0xf434ef84;
            break;
        case 1:
            v_4 = 0x82158b47;
            break;
        case 2:
            v_4 = 0x3c00afed;
            break;
        case 3:
            v_4 = ${component_at_ar_afgrip};
            break;
        }
        break;
    case ${weapon_combatmg}:
        switch (a_1) {
        case 0:
            v_4 = 0xe1ffb34a;
            break;
        case 1:
            v_4 = 0xd6c59cd6;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_scope_medium};
            break;
        }
        break;
    case ${weapon_pumpshotgun}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_sr_supp};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        }
        break;
    case ${weapon_assaultshotgun}:
        switch (a_1) {
        case 0:
            v_4 = 0x94e81bc7;
            break;
        case 1:
            v_4 = 0x86bd7f72;
            break;
        case 2:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 3:
            v_4 = ${component_at_ar_flsh};
            break;
        case 4:
            v_4 = ${component_at_ar_supp};
            break;
        }
        break;
    case ${weapon_sniperrifle}:
        switch (a_1) {
        case 0:
            v_4 = 0x9bc64089;
            break;
        case 1:
            v_4 = ${component_at_scope_large};
            break;
        case 2:
            v_4 = ${component_at_scope_max};
            break;
        case 3:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 4:
            v_4 = 0x4032b5e7;
            break;
        }
        break;
    case ${weapon_heavysniper}:
        switch (a_1) {
        case 0:
            v_4 = 0x476f52f4;
            break;
        case 1:
            v_4 = ${component_at_scope_large};
            break;
        case 2:
            v_4 = ${component_at_scope_max};
            break;
        }
        break;
    case ${weapon_grenadelauncher}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        case 2:
            v_4 = ${component_at_scope_small};
            break;
        }
        break;
    case ${weapon_minigun}:
        switch (a_1) {
        case 0:
            v_4 = 0xc8de6f06;
            break;
        }
        break;
    case ${weapon_assaultsmg}:
        switch (a_1) {
        case 0:
            v_4 = 0x8d1307b0;
            break;
        case 1:
            v_4 = 0xbb46e417;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_macro};
            break;
        case 4:
            v_4 = ${component_at_ar_supp_02};
            break;
        }
        break;
    case ${weapon_bullpupshotgun}:
        switch (a_1) {
        case 0:
            v_4 = ${component_at_ar_afgrip};
            break;
        case 1:
            v_4 = ${component_at_ar_flsh};
            break;
        case 2:
            v_4 = ${component_at_ar_supp_02};
            break;
        }
        break;
    case 0x99aeeb3b:
        switch (a_1) {
        case 0:
            v_4 = 0x2297be19;
            break;
        case 1:
            v_4 = 0xd9d3ac92;
            break;
        case 2:
            v_4 = ${component_at_pi_flsh};
            break;
        case 3:
            v_4 = ${component_at_ar_supp_02};
            break;
        case 4:
            v_4 = 0x77b8ab2f;
            break;
        }
        break;
    case 0xa3d4d34:
        switch (a_1) {
        case 0:
            v_4 = 0x4317f19e;
            break;
        case 1:
            v_4 = 0x334a5203;
            break;
        case 2:
            v_4 = ${component_at_ar_flsh};
            break;
        case 3:
            v_4 = ${component_at_scope_small};
            break;
        case 4:
            v_4 = ${component_at_ar_afgrip};
            break;
        }
        break;
    case ${weapon_sawnoffshotgun}:
        switch (a_1) {
        case 0:
            v_4 = 0x85a64df9;
            break;
        }
        break;
    case 0xd8df3c3c:
        switch (a_1) {
        case 0:
            v_4 = 0xc613f685;
            break;
        case 1:
            v_4 = 0xeed9fd63;
            break;
        case 2:
            v_4 = 0x50910c31;
            break;
        case 3:
            v_4 = 0x9761d9dc;
            break;
        case 4:
            v_4 = 0x7decfe30;
            break;
        case 5:
            v_4 = 0x3f4e8aa6;
            break;
        case 6:
            v_4 = 0x8b808bb;
            break;
        case 7:
            v_4 = 0xe28babef;
            break;
        case 8:
            v_4 = 0x7af3f785;
            break;
        }
        break;
    default:
        if (a_0 != 0) {
            v_5 = sub_20b7(a_0, &v_6);
            if (v_5 != -1) {
                if (a_1 < DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(v_5)) {
                    if (DLC1::GET_DLC_WEAPON_COMPONENT_DATA(v_5, a_1, &v_2D)) {
                        return v_2D._f3;
                    }
                }
            }
        }
        break;
    }
    return v_4;
}

auto sub_5cc7(auto a_0, auto a_1, auto a_2) {
    if (a_2 == 0) {}
    if (sub_294b()) {
        return 0;
    }
    v_5 = sub_5cfe(a_0, a_1);
    v_6 = sub_2163(a_0);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

auto sub_5cfe(auto a_0, auto a_1) {
    v_4 = sub_2520(sub_5d17(a_0), a_1, 0);
    return v_4;
}

auto sub_5d17(auto a_0) {
    v_3 = sub_2163(a_0);
    v_4 = sub_2610(v_3);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_4) {
        case 0:
            return 671;
            break;
        case 1:
            return 672;
            break;
        case 2:
            return 2387;
            break;
        }
    }
    return 3015;
}

auto sub_5d96(auto a_0, auto a_1, auto a_2) {
    if (a_2 == 0) {}
    if (sub_294b()) {
        return 0;
    }
    if (sub_2957() == 0) {
        return 0;
    }
    if (a_0 != ${gadget_parachute}) {
        if (sub_261d(sub_5e8d(a_0), -1)) {
            return 0;
        }
    }
    v_5 = sub_5df5(a_0, a_1);
    v_6 = sub_2163(a_0);
    return GAMEPLAY::IS_BIT_SET(v_5, sub_2156(v_6));
}

auto sub_5df5(auto a_0, auto a_1) {
    v_4 = sub_2520(sub_5e0e(a_0), a_1, 0);
    return v_4;
}

auto sub_5e0e(auto a_0) {
    v_3 = sub_2163(a_0);
    v_4 = sub_2610(v_3);
    if (((sub_8ba9() == 0) || (sub_2605() == 0)) || ((sub_8ba9() == 999) && (sub_2605() == 999))) {
        switch (v_4) {
        case 0:
            return 791;
            break;
        case 1:
            return 792;
            break;
        case 2:
            return 2378;
            break;
        }
    }
    return 3015;
}

auto sub_5e8d(auto a_0) {
    switch (a_0) {
    case ${weapon_unarmed}:
        return 18;
        break;
    case ${weapon_grenade}:
        return 66;
        break;
    case ${weapon_smokegrenade}:
        return 68;
        break;
    case ${weapon_stickybomb}:
        return 70;
        break;
    case ${weapon_molotov}:
        return 72;
        break;
    case ${weapon_pistol}:
        return 18;
        break;
    case ${weapon_combatpistol}:
        return 40;
        break;
    case 0x99aeeb3b:
        return 22;
        break;
    case ${weapon_appistol}:
        return 24;
        break;
    case ${weapon_microsmg}:
        return 26;
        break;
    case ${weapon_smg}:
        return 28;
        break;
    case ${weapon_assaultsmg}:
        return 30;
        break;
    case ${weapon_assaultrifle}:
        return 32;
        break;
    case ${weapon_carbinerifle}:
        return 34;
        break;
    case ${weapon_advancedrifle}:
        return 36;
        break;
    case ${weapon_mg}:
        return 38;
        break;
    case ${weapon_assaultmg}:
        return 42;
        break;
    case ${weapon_pumpshotgun}:
        return 44;
        break;
    case ${weapon_sawnoffshotgun}:
        return 46;
        break;
    case ${weapon_bullpupshotgun}:
        return 48;
        break;
    case ${weapon_assaultshotgun}:
        return 50;
        break;
    case ${weapon_sniperrifle}:
        return 54;
        break;
    case ${weapon_heavysniper}:
        return 56;
        break;
    case ${weapon_grenadelauncher}:
        return 60;
        break;
    case ${weapon_rpg}:
        return 62;
        break;
    case ${weapon_minigun}:
        return 64;
        break;
    case ${weapon_stungun}:
        return 52;
        break;
    case ${weapon_petrolcan}:
        return 75;
        break;
    case ${weapon_knife}:
        return 2;
        break;
    case ${weapon_nightstick}:
        return 4;
        break;
    case ${weapon_hammer}:
        return 12;
        break;
    case ${weapon_bat}:
        return 14;
        break;
    case ${weapon_crowbar}:
        return 6;
        break;
    case ${weapon_golfclub}:
        return 16;
        break;
    case ${weapon_assaultsniper}:
        return 58;
        break;
    case ${weapon_combatmg}:
        return 40;
        break;
    case ${weapon_bottle}:
        return 143;
        break;
    case ${weapon_specialcarbine}:
        return 170;
        break;
    case ${weapon_snspistol}:
        return 145;
        break;
    case ${weapon_heavypistol}:
        return 168;
        break;
    case ${weapon_bullpuprifle}:
        return 172;
        break;
    case 0x61012683:
        return 174;
        break;
    case 0x92a27487:
        return 195;
        break;
    case 0x83839c4:
        return 197;
        break;
    case 0x7f7497e5:
        return 199;
        break;
    case 0xa89cb99e:
        return 201;
        break;
    case 0x3aabbbaa:
        return 213;
        break;
    case 0xc734385a:
        return 215;
        break;
    case 0xab564b93:
        return 219;
        break;
    case 0x63ab0442:
        return 221;
        break;
    case 0xa3d4d34:
        return 223;
        break;
    case 0xd8df3c3c:
        return 225;
        break;
    case 0xdc4db296:
        return 227;
        break;
    case 0xf9dcbf2d:
        return 217;
        break;
    }
    return 2;
}

auto sub_618e(auto a_0) {
    return a_0._f119;
}

void sub_619b(auto a_0, auto a_1) {
    if (WEAPON::IS_WEAPON_VALID(${weapon_hammer}) && (l_5A[10/*1*/] == a_1._f5)) {
        sub_6677(${weapon_hammer}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x99aeeb3b) && (l_5A[0/*1*/] == a_1._f5)) {
        sub_6677(0x99aeeb3b, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bullpupshotgun}) && (l_5A[1/*1*/] == a_1._f5)) {
        sub_6677(${weapon_bullpupshotgun}, a_0, a_1, 0);
    }
    if (sub_660b(1, 0)) {
        if (WEAPON::IS_WEAPON_VALID(${weapon_sawnoffshotgun}) && (l_5A[2/*1*/] == a_1._f5)) {
            sub_6677(${weapon_sawnoffshotgun}, a_0, a_1, 0);
        }
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bottle}) && (l_5A[3/*1*/] == a_1._f5)) {
        sub_6677(${weapon_bottle}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_snspistol}) && (l_5A[4/*1*/] == a_1._f5)) {
        sub_6677(${weapon_snspistol}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x61012683) && (l_5A[11/*1*/] == a_1._f5)) {
        sub_6677(0x61012683, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_heavypistol}) && (l_5A[7/*1*/] == a_1._f5)) {
        sub_6677(${weapon_heavypistol}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_specialcarbine}) && (l_5A[5/*1*/] == a_1._f5)) {
        sub_6677(${weapon_specialcarbine}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bullpuprifle}) && (l_5A[6/*1*/] == a_1._f5)) {
        sub_6677(${weapon_bullpuprifle}, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x92a27487) && (l_5A[8/*1*/] == a_1._f5)) {
        sub_6677(0x92a27487, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x83839c4) && (l_5A[9/*1*/] == a_1._f5)) {
        sub_6677(0x83839c4, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x7f7497e5) && (l_5A[14/*1*/] == a_1._f5)) {
        sub_6677(0x7f7497e5, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0xa89cb99e) && (l_5A[13/*1*/] == a_1._f5)) {
        sub_6677(0xa89cb99e, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x47757124) && (l_5A[12/*1*/] == a_1._f5)) {
        sub_6677(0x47757124, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x3aabbbaa) && (l_5A[15/*1*/] == a_1._f5)) {
        sub_6677(0x3aabbbaa, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0xc734385a) && (l_5A[16/*1*/] == a_1._f5)) {
        sub_6677(0xc734385a, a_0, a_1, 0);
    }
    if (sub_6588()) {
        if (WEAPON::IS_WEAPON_VALID(0xf9dcbf2d) && (l_5A[22/*1*/] == a_1._f5)) {
            sub_6677(0xf9dcbf2d, a_0, a_1, 0);
        }
    }
    if (WEAPON::IS_WEAPON_VALID(0xab564b93) && (l_5A[17/*1*/] == a_1._f5)) {
        sub_6677(0xab564b93, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0x63ab0442) && (l_5A[18/*1*/] == a_1._f5)) {
        sub_6677(0x63ab0442, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0xa3d4d34) && (l_5A[19/*1*/] == a_1._f5)) {
        sub_6677(0xa3d4d34, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0xdc4db296) && (l_5A[20/*1*/] == a_1._f5)) {
        sub_6677(0xdc4db296, a_0, a_1, 0);
    }
    if (WEAPON::IS_WEAPON_VALID(0xd8df3c3c) && (l_5A[21/*1*/] == a_1._f5)) {
        sub_6677(0xd8df3c3c, a_0, a_1, 0);
    }
}

auto sub_6588() {
    if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
        if (GAMEPLAY::IS_BIT_SET(GAMEPLAY::GET_PROFILE_SETTING(866), 0)) {
            return 1;
        }
    }
    if (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()) {
        if (GAMEPLAY::IS_BIT_SET(g_17C4E._f29C._f2AB, 7)) {
            return 1;
        }
    }
    if (g_2025D == 2) {
        return 1;
    }
    if (NETWORK::NETWORK_IS_SIGNED_IN()) {
        if (NETWORK::_85443FF4C328F53B()) {
            if (NETWORK::_593570C289A77688()) {
                if (GAMEPLAY::_5AA3BEFA29F03AD4()) {
                    v_2 = GAMEPLAY::GET_PROFILE_SETTING(866);
                    GAMEPLAY::SET_BIT(&v_2, 0);
                    STATS::_DAC073C7901F9E15(v_2);
                }
                return 1;
            }
        }
    }
    return 0;
}

auto sub_660b(auto a_0, auto a_1) {
    if (a_0) {
        if (GAMEPLAY::IS_BIT_SET(g_17C4E._f29C._f2AB, 2)) {
            return 1;
        }
    }
    if (NETWORK::_67A5589628E0CFF6()) {
        if ((!a_1) || NETWORK::NETWORK_IS_SIGNED_ONLINE()) {
            if ((!GAMEPLAY::IS_PS3_VERSION()) && (!GAMEPLAY::IS_ORBIS_VERSION())) {
                return 1;
            }
        }
    }
    if (a_1) {
        if (NETWORK::_1353F87E89946207()) {
            return 0;
        }
    }
    if (NETWORK::_67A5589628E0CFF6()) {
        return 1;
    }
    return 0;
}

void sub_6677(auto a_0, auto a_1, auto a_2, auto a_3) {
    a_3 = a_3;
    v_6/*"16"*/ = sub_1850(a_0, 0);
    v_A/*"16"*/ = sub_8193(a_0);
    v_E = sub_7e0f(a_0);
    v_F = sub_7a05(a_0, a_2);
    v_10 = sub_75fb(a_0, a_2);
    v_11 = sub_7340(a_0, a_2);
    v_12 = sub_6b62(a_0, a_2);
    WEAPON::GET_WEAPON_HUD_STATS(a_0, &v_13);
    v_13._f2 = WEAPON::GET_WEAPON_CLIP_SIZE(a_0);
    v_25 = 0;
    for (v_24 = 0; v_24 <= 8; v_24 += 1) {
        if ((a_1._f1[v_24/*1*/] == 0) && WEAPON::IS_WEAPON_VALID(a_0)) {
            if (sub_5d96(a_0, a_2, 0)) {
                v_25 = 1;
                if (v_25) {}
            }
            for (v_23 = 0; v_23 <= 8; v_23 += 1) {
                v_22 = sub_54ab(a_0, v_23);
                if (v_22 != 0) {
                    if (sub_3ed1(v_22, a_0, a_1._f114) && v_25) {
                        if (WEAPON::GET_WEAPON_COMPONENT_HUD_STATS(v_22, &v_18)) {
                            v_1D += v_18;
                            v_1D._f1 += v_18._f1;
                            v_1D._f2 += v_18._f2;
                            v_1D._f3 += v_18._f3;
                            v_1D._f4 += v_18._f4;
                        } else { }
                    } else { }
                    if (sub_473e(v_22, a_0, a_1._f114)) {
                    } else { }
                    if (sub_32f4(v_22, a_0, a_1._f114)) {}
                } else { }
            }
            v_1D._f2 = sub_6a5c(a_0);
            sub_6a3c(v_24, &v_6, &v_A, a_1);
            sub_6a2a(v_24, v_13, a_1);
            sub_6a18(v_24, v_1D, a_1);
            if (sub_129f(a_0)) {
                sub_6a06(v_24, -1, a_1);
                sub_69f4(v_24, v_1D._f3, a_1);
                sub_69e2(v_24, -1, a_1);
                sub_69d0(v_24, v_1D._f4, a_1);
                sub_69be(v_24, -1, a_1);
                sub_69ac(v_24, v_1D._f2, a_1);
            } else { 
                sub_6a06(v_24, v_13._f3, a_1);
                sub_69f4(v_24, v_1D._f3, a_1);
                sub_69e2(v_24, v_13._f4, a_1);
                sub_69d0(v_24, v_1D._f4, a_1);
                sub_69be(v_24, v_13._f2, a_1);
                sub_69ac(v_24, v_1D._f2, a_1);
            }
            sub_699a(v_24, v_10, a_1);
            sub_6988(v_24, v_F, a_1);
            if (sub_129f(a_0)) {
                sub_6976(v_24, -1.0, a_1);
                sub_6964(v_24, -1, a_1);
            } else { 
                sub_6976(v_24, v_E, a_1);
                sub_6964(v_24, v_11, a_1);
            }
            sub_6952(v_24, v_12, a_1);
            sub_6940(v_24, v_13._f1, a_1);
            sub_692e(v_24, v_1D._f1, a_1);
            sub_691c(v_24, a_0, a_1);
            sub_690d(a_2, a_1);
            a_1._f1[v_24/*1*/] = 1;
            v_24 = 9;
        }
    }
}

void sub_690d(auto a_0, auto a_1) {
    a_1._f114 = a_0;
}

void sub_691c(auto a_0, auto a_1, auto a_2) {
    a_2._f55[a_0/*1*/] = a_1;
}

void sub_692e(auto a_0, auto a_1, auto a_2) {
    a_2._fCD[a_0/*1*/] = a_1;
}

void sub_6940(auto a_0, auto a_1, auto a_2) {
    a_2._f9B[a_0/*1*/] = a_1;
}

void sub_6952(auto a_0, auto a_1, auto a_2) {
    a_2._f87[a_0/*1*/] = a_1;
}

void sub_6964(auto a_0, auto a_1, auto a_2) {
    a_2._f7D[a_0/*1*/] = a_1;
}

void sub_6976(auto a_0, auto a_1, auto a_2) {
    a_2._f73[a_0/*1*/] = a_1;
}

void sub_6988(auto a_0, auto a_1, auto a_2) {
    a_2._f5F[a_0/*1*/] = a_1;
}

void sub_699a(auto a_0, auto a_1, auto a_2) {
    a_2._f69[a_0/*1*/] = a_1;
}

void sub_69ac(auto a_0, auto a_1, auto a_2) {
    a_2._fD7[a_0/*1*/] = a_1;
}

void sub_69be(auto a_0, auto a_1, auto a_2) {
    a_2._fA5[a_0/*1*/] = a_1;
}

void sub_69d0(auto a_0, auto a_1, auto a_2) {
    a_2._fEB[a_0/*1*/] = a_1;
}

void sub_69e2(auto a_0, auto a_1, auto a_2) {
    a_2._fAF[a_0/*1*/] = a_1;
}

void sub_69f4(auto a_0, auto a_1, auto a_2) {
    a_2._fE1[a_0/*1*/] = a_1;
}

void sub_6a06(auto a_0, auto a_1, auto a_2) {
    a_2._fB9[a_0/*1*/] = a_1;
}

void sub_6a18(auto a_0, auto a_1, auto a_2) {
    a_2._fC3[a_0/*1*/] = a_1;
}

void sub_6a2a(auto a_0, auto a_1, auto a_2) {
    a_2._f91[a_0/*1*/] = a_1;
}

void sub_6a3c(auto a_0, auto a_1, auto a_2, auto a_3) {
    a_3._fB[a_0/*4*/]/*"16"*/ = a_1;
    a_3._f30[a_0/*4*/]/*"16"*/ = a_2;
}

auto sub_6a5c(auto a_0) {
    switch (a_0) {
    case ${weapon_pistol}:
        return 16;
    case ${weapon_combatpistol}:
        return 16;
    case ${weapon_appistol}:
        return 36;
    case ${weapon_microsmg}:
        return 30;
    case ${weapon_smg}:
        return 60;
    case ${weapon_assaultrifle}:
        return 60;
    case ${weapon_carbinerifle}:
        return 60;
    case ${weapon_advancedrifle}:
        return 60;
    case ${weapon_mg}:
        return 100;
    case ${weapon_combatmg}:
        return 200;
    case ${weapon_assaultshotgun}:
        return 32;
    case 0x99aeeb3b:
        return 12;
    case ${weapon_assaultsmg}:
        return 60;
    case ${weapon_snspistol}:
        return 12;
    case ${weapon_specialcarbine}:
        return 60;
    case ${weapon_bullpuprifle}:
        return 60;
    case ${weapon_heavypistol}:
        return 36;
    case 0x83839c4:
        return 14;
    case 0x61012683:
        return 50;
    case 0xc734385a:
        return 16;
    case 0x3aabbbaa:
        return 12;
    case 0xa3d4d34:
        return 60;
    }
    return 0;
    return 0;
}

auto sub_6b62(auto a_0, auto a_1) {
    switch (a_0) {
    case ${weapon_pistol}:
        return SYSTEM::TO_FLOAT(sub_2520(242, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(243, a_1, 0));
    case ${weapon_combatpistol}:
        return SYSTEM::TO_FLOAT(sub_2520(252, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(253, a_1, 0));
    case ${weapon_appistol}:
        return SYSTEM::TO_FLOAT(sub_2520(272, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(273, a_1, 0));
    case ${weapon_microsmg}:
        return SYSTEM::TO_FLOAT(sub_2520(282, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(283, a_1, 0));
    case ${weapon_smg}:
        return SYSTEM::TO_FLOAT(sub_2520(292, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(293, a_1, 0));
    case ${weapon_assaultrifle}:
        return SYSTEM::TO_FLOAT(sub_2520(312, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(313, a_1, 0));
    case ${weapon_carbinerifle}:
        return SYSTEM::TO_FLOAT(sub_2520(321, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(322, a_1, 0));
    case ${weapon_advancedrifle}:
        return SYSTEM::TO_FLOAT(sub_2520(330, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(331, a_1, 0));
    case ${weapon_mg}:
        return SYSTEM::TO_FLOAT(sub_2520(339, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(340, a_1, 0));
    case ${weapon_combatmg}:
        return SYSTEM::TO_FLOAT(sub_2520(348, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(349, a_1, 0));
    case ${weapon_pumpshotgun}:
        return SYSTEM::TO_FLOAT(sub_2520(366, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(367, a_1, 0));
    case ${weapon_sawnoffshotgun}:
        return SYSTEM::TO_FLOAT(sub_2520(375, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(376, a_1, 0));
    case ${weapon_assaultshotgun}:
        return SYSTEM::TO_FLOAT(sub_2520(394, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(395, a_1, 0));
    case ${weapon_sniperrifle}:
        return SYSTEM::TO_FLOAT(sub_2520(413, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(414, a_1, 0));
    case ${weapon_heavysniper}:
        return SYSTEM::TO_FLOAT(sub_2520(422, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(423, a_1, 0));
    case ${weapon_grenadelauncher}:
        return SYSTEM::TO_FLOAT(sub_2520(433, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(434, a_1, 0));
    case ${weapon_rpg}:
        return SYSTEM::TO_FLOAT(sub_2520(440, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(441, a_1, 0));
    case ${weapon_minigun}:
        return SYSTEM::TO_FLOAT(sub_2520(447, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(448, a_1, 0));
    case ${weapon_grenade}:
        return SYSTEM::TO_FLOAT(sub_2520(456, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(457, a_1, 0));
    case ${weapon_smokegrenade}:
        return SYSTEM::TO_FLOAT(sub_2520(464, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(465, a_1, 0));
    case ${weapon_stickybomb}:
        return SYSTEM::TO_FLOAT(sub_2520(473, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(474, a_1, 0));
    case ${weapon_molotov}:
        return SYSTEM::TO_FLOAT(sub_2520(481, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(482, a_1, 0));
    case ${weapon_stungun}:
        return SYSTEM::TO_FLOAT(sub_2520(403, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(404, a_1, 0));
    case ${weapon_knife}:
        return SYSTEM::TO_FLOAT(sub_2520(185, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(187, a_1, 0));
    case ${weapon_nightstick}:
        return SYSTEM::TO_FLOAT(sub_2520(193, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(195, a_1, 0));
    case ${weapon_hammer}:
        return SYSTEM::TO_FLOAT(sub_2520(221, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(223, a_1, 0));
    case ${weapon_bat}:
        return SYSTEM::TO_FLOAT(sub_2520(228, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(230, a_1, 0));
    case ${weapon_crowbar}:
        return SYSTEM::TO_FLOAT(sub_2520(200, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(202, a_1, 0));
    case ${weapon_golfclub}:
        return SYSTEM::TO_FLOAT(sub_2520(235, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(237, a_1, 0));
    case 0x99aeeb3b:
        return SYSTEM::TO_FLOAT(sub_2520(262, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(263, a_1, 0));
    case ${weapon_assaultsmg}:
        return SYSTEM::TO_FLOAT(sub_2520(302, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(303, a_1, 0));
    case ${weapon_bullpupshotgun}:
        return SYSTEM::TO_FLOAT(sub_2520(385, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(386, a_1, 0));
    case ${weapon_assaultmg}:
        return SYSTEM::TO_FLOAT(sub_2520(357, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(358, a_1, 0));
    case ${weapon_assaultsniper}:
        return SYSTEM::TO_FLOAT(sub_2520(312, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(313, a_1, 0));
    case ${weapon_heavyrifle}:
        return SYSTEM::TO_FLOAT(sub_2520(422, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(423, a_1, 0));
    case ${weapon_programmablear}:
        return SYSTEM::TO_FLOAT(sub_2520(312, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(313, a_1, 0));
    case ${weapon_bottle}:
        return SYSTEM::TO_FLOAT(sub_2520(1719, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(1720, a_1, 0));
    case ${weapon_snspistol}:
        return SYSTEM::TO_FLOAT(sub_2520(1729, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(1730, a_1, 0));
    case ${weapon_specialcarbine}:
        return SYSTEM::TO_FLOAT(sub_2520(2503, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2504, a_1, 0));
    case ${weapon_bullpuprifle}:
        return SYSTEM::TO_FLOAT(sub_2520(2513, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2514, a_1, 0));
    case ${weapon_heavypistol}:
        return SYSTEM::TO_FLOAT(sub_2520(2493, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2494, a_1, 0));
    case 0x92a27487:
        return SYSTEM::TO_FLOAT(sub_2520(2796, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2797, a_1, 0));
    case 0x83839c4:
        return SYSTEM::TO_FLOAT(sub_2520(2806, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2807, a_1, 0));
    case 0x61012683:
        return SYSTEM::TO_FLOAT(sub_2520(2523, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2524, a_1, 0));
    case 0xa89cb99e:
        return SYSTEM::TO_FLOAT(sub_2520(2826, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2827, a_1, 0));
    case 0x7f7497e5:
        return SYSTEM::TO_FLOAT(sub_2520(2816, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2817, a_1, 0));
    case 0x3aabbbaa:
        return SYSTEM::TO_FLOAT(sub_2520(2904, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2905, a_1, 0));
    case 0xc734385a:
        return SYSTEM::TO_FLOAT(sub_2520(2914, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2915, a_1, 0));
    case 0x63ab0442:
        return SYSTEM::TO_FLOAT(sub_2520(2940, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2941, a_1, 0));
    case 0xab564b93:
        return SYSTEM::TO_FLOAT(sub_2520(2932, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2933, a_1, 0));
    case 0xa3d4d34:
        return SYSTEM::TO_FLOAT(sub_2520(2948, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2949, a_1, 0));
    case 0xdc4db296:
        return SYSTEM::TO_FLOAT(sub_2520(2965, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2966, a_1, 0));
    case 0xd8df3c3c:
        return SYSTEM::TO_FLOAT(sub_2520(2958, a_1, 0)) / SYSTEM::TO_FLOAT(sub_2520(2959, a_1, 0));
    }
    return 0.0;
}

auto sub_7340(auto a_0, auto a_1) {
    switch (a_0) {
    case ${weapon_pistol}:
        return sub_2520(246, a_1, 0);
    case ${weapon_combatpistol}:
        return sub_2520(256, a_1, 0);
    case ${weapon_appistol}:
        return sub_2520(276, a_1, 0);
    case ${weapon_microsmg}:
        return sub_2520(286, a_1, 0);
    case ${weapon_smg}:
        return sub_2520(296, a_1, 0);
    case ${weapon_assaultrifle}:
        return sub_2520(316, a_1, 0);
    case ${weapon_carbinerifle}:
        return sub_2520(325, a_1, 0);
    case ${weapon_advancedrifle}:
        return sub_2520(334, a_1, 0);
    case ${weapon_mg}:
        return sub_2520(343, a_1, 0);
    case ${weapon_combatmg}:
        return sub_2520(352, a_1, 0);
    case ${weapon_pumpshotgun}:
        return sub_2520(370, a_1, 0);
    case ${weapon_sawnoffshotgun}:
        return sub_2520(379, a_1, 0);
    case ${weapon_assaultshotgun}:
        return sub_2520(398, a_1, 0);
    case ${weapon_sniperrifle}:
        return sub_2520(417, a_1, 0);
    case ${weapon_heavysniper}:
        return sub_2520(426, a_1, 0);
    case ${weapon_minigun}:
        return sub_2520(451, a_1, 0);
    case 0x99aeeb3b:
        return sub_2520(266, a_1, 0);
    case ${weapon_assaultsmg}:
        return sub_2520(306, a_1, 0);
    case ${weapon_heavyrifle}:
        return sub_2520(426, a_1, 0);
    case ${weapon_bullpupshotgun}:
        return sub_2520(389, a_1, 0);
    case ${weapon_assaultmg}:
        return sub_2520(361, a_1, 0);
    case ${weapon_assaultsniper}:
        return sub_2520(316, a_1, 0);
    case ${weapon_programmablear}:
        return sub_2520(316, a_1, 0);
    case ${weapon_rubbergun}:
        return sub_2520(316, a_1, 0);
    case ${weapon_snspistol}:
        return sub_2520(1733, a_1, 0);
    case ${weapon_specialcarbine}:
        return sub_2520(2507, a_1, 0);
    case ${weapon_bullpuprifle}:
        return sub_2520(2517, a_1, 0);
    case ${weapon_heavypistol}:
        return sub_2520(2497, a_1, 0);
    case 0x83839c4:
        return sub_2520(2810, a_1, 0);
    case 0x61012683:
        return sub_2520(2527, a_1, 0);
    case 0xa89cb99e:
        return sub_2520(2830, a_1, 0);
    case 0x7f7497e5:
        return sub_2520(2820, a_1, 0);
    case 0x3aabbbaa:
        return sub_2520(2908, a_1, 0);
    case 0xc734385a:
        return sub_2520(2918, a_1, 0);
    case 0xa3d4d34:
        return sub_2520(2952, a_1, 0);
    case 0xdc4db296:
        return sub_2520(2969, a_1, 0);
    }
    return 0;
}

auto sub_75fb(auto a_0, auto a_1) {
    switch (a_0) {
    case ${weapon_pistol}:
        return sub_2520(243, a_1, 0);
    case ${weapon_combatpistol}:
        return sub_2520(253, a_1, 0);
    case ${weapon_appistol}:
        return sub_2520(273, a_1, 0);
    case ${weapon_microsmg}:
        return sub_2520(283, a_1, 0);
    case ${weapon_smg}:
        return sub_2520(293, a_1, 0);
    case ${weapon_assaultrifle}:
        return sub_2520(313, a_1, 0);
    case ${weapon_carbinerifle}:
        return sub_2520(322, a_1, 0);
    case ${weapon_advancedrifle}:
        return sub_2520(331, a_1, 0);
    case ${weapon_mg}:
        return sub_2520(340, a_1, 0);
    case ${weapon_combatmg}:
        return sub_2520(349, a_1, 0);
    case ${weapon_pumpshotgun}:
        return sub_2520(367, a_1, 0);
    case ${weapon_sawnoffshotgun}:
        return sub_2520(376, a_1, 0);
    case ${weapon_assaultshotgun}:
        return sub_2520(395, a_1, 0);
    case ${weapon_sniperrifle}:
        return sub_2520(414, a_1, 0);
    case ${weapon_heavysniper}:
        return sub_2520(423, a_1, 0);
    case ${weapon_grenadelauncher}:
        return sub_2520(434, a_1, 0);
    case ${weapon_rpg}:
        return sub_2520(441, a_1, 0);
    case ${weapon_minigun}:
        return sub_2520(448, a_1, 0);
    case ${weapon_grenade}:
        return sub_2520(457, a_1, 0);
    case ${weapon_smokegrenade}:
        return sub_2520(465, a_1, 0);
    case ${weapon_stickybomb}:
        return sub_2520(474, a_1, 0);
    case ${weapon_molotov}:
        return sub_2520(482, a_1, 0);
    case ${weapon_stungun}:
        return sub_2520(404, a_1, 0);
    case ${weapon_knife}:
        return sub_2520(187, a_1, 0);
    case ${weapon_nightstick}:
        return sub_2520(195, a_1, 0);
    case ${weapon_hammer}:
        return sub_2520(223, a_1, 0);
    case ${weapon_bat}:
        return sub_2520(230, a_1, 0);
    case ${weapon_crowbar}:
        return sub_2520(202, a_1, 0);
    case ${weapon_golfclub}:
        return sub_2520(237, a_1, 0);
    case 0x99aeeb3b:
        return sub_2520(263, a_1, 0);
    case ${weapon_assaultsmg}:
        return sub_2520(303, a_1, 0);
    case ${weapon_heavyrifle}:
        return sub_2520(423, a_1, 0);
    case ${weapon_bullpupshotgun}:
        return sub_2520(386, a_1, 0);
    case ${weapon_assaultmg}:
        return sub_2520(358, a_1, 0);
    case ${weapon_assaultsniper}:
        return sub_2520(313, a_1, 0);
    case ${weapon_programmablear}:
        return sub_2520(313, a_1, 0);
    case ${weapon_rubbergun}:
        return sub_2520(313, a_1, 0);
    case ${weapon_bottle}:
        return sub_2520(1720, a_1, 0);
    case ${weapon_snspistol}:
        return sub_2520(1730, a_1, 0);
    case ${weapon_specialcarbine}:
        return sub_2520(2504, a_1, 0);
    case ${weapon_bullpuprifle}:
        return sub_2520(2514, a_1, 0);
    case ${weapon_heavypistol}:
        return sub_2520(2494, a_1, 0);
    case 0x92a27487:
        return sub_2520(2797, a_1, 0);
    case 0x83839c4:
        return sub_2520(2807, a_1, 0);
    case 0x61012683:
        return sub_2520(2524, a_1, 0);
    case 0xa89cb99e:
        return sub_2520(2827, a_1, 0);
    case 0x7f7497e5:
        return sub_2520(2817, a_1, 0);
    case 0x3aabbbaa:
        return sub_2520(2905, a_1, 0);
    case 0xc734385a:
        return sub_2520(2915, a_1, 0);
    case 0xab564b93:
        return sub_2520(2933, a_1, 0);
    case 0x63ab0442:
        return sub_2520(2941, a_1, 0);
    case 0xa3d4d34:
        return sub_2520(2949, a_1, 0);
    case 0xdc4db296:
        return sub_2520(2966, a_1, 0);
    case 0xd8df3c3c:
        return sub_2520(2959, a_1, 0);
    }
    return 0;
}

auto sub_7a05(auto a_0, auto a_1) {
    switch (a_0) {
    case ${weapon_pistol}:
        return sub_2520(242, a_1, 0);
    case ${weapon_combatpistol}:
        return sub_2520(252, a_1, 0);
    case ${weapon_appistol}:
        return sub_2520(272, a_1, 0);
    case ${weapon_microsmg}:
        return sub_2520(282, a_1, 0);
    case ${weapon_smg}:
        return sub_2520(292, a_1, 0);
    case ${weapon_assaultrifle}:
        return sub_2520(312, a_1, 0);
    case ${weapon_carbinerifle}:
        return sub_2520(321, a_1, 0);
    case ${weapon_advancedrifle}:
        return sub_2520(330, a_1, 0);
    case ${weapon_mg}:
        return sub_2520(339, a_1, 0);
    case ${weapon_combatmg}:
        return sub_2520(348, a_1, 0);
    case ${weapon_pumpshotgun}:
        return sub_2520(366, a_1, 0);
    case ${weapon_sawnoffshotgun}:
        return sub_2520(375, a_1, 0);
    case ${weapon_assaultshotgun}:
        return sub_2520(394, a_1, 0);
    case ${weapon_sniperrifle}:
        return sub_2520(413, a_1, 0);
    case ${weapon_heavysniper}:
        return sub_2520(422, a_1, 0);
    case ${weapon_grenadelauncher}:
        return sub_2520(433, a_1, 0);
    case ${weapon_rpg}:
        return sub_2520(440, a_1, 0);
    case ${weapon_minigun}:
        return sub_2520(447, a_1, 0);
    case ${weapon_grenade}:
        return sub_2520(456, a_1, 0);
    case ${weapon_smokegrenade}:
        return sub_2520(464, a_1, 0);
    case ${weapon_stickybomb}:
        return sub_2520(473, a_1, 0);
    case ${weapon_molotov}:
        return sub_2520(481, a_1, 0);
    case ${weapon_stungun}:
        return sub_2520(403, a_1, 0);
    case ${weapon_knife}:
        return sub_2520(185, a_1, 0);
    case ${weapon_nightstick}:
        return sub_2520(193, a_1, 0);
    case ${weapon_hammer}:
        return sub_2520(221, a_1, 0);
    case ${weapon_bat}:
        return sub_2520(228, a_1, 0);
    case ${weapon_crowbar}:
        return sub_2520(200, a_1, 0);
    case ${weapon_golfclub}:
        return sub_2520(235, a_1, 0);
    case 0x99aeeb3b:
        return sub_2520(262, a_1, 0);
    case ${weapon_assaultsmg}:
        return sub_2520(302, a_1, 0);
    case ${weapon_heavyrifle}:
        return sub_2520(422, a_1, 0);
    case ${weapon_bullpupshotgun}:
        return sub_2520(385, a_1, 0);
    case ${weapon_assaultmg}:
        return sub_2520(357, a_1, 0);
    case ${weapon_assaultsniper}:
        return sub_2520(312, a_1, 0);
    case ${weapon_programmablear}:
        return sub_2520(312, a_1, 0);
    case ${weapon_rubbergun}:
        return sub_2520(312, a_1, 0);
    case ${weapon_bottle}:
        return sub_2520(1719, a_1, 0);
    case ${weapon_snspistol}:
        return sub_2520(1729, a_1, 0);
    case ${weapon_specialcarbine}:
        return sub_2520(2503, a_1, 0);
    case ${weapon_bullpuprifle}:
        return sub_2520(2513, a_1, 0);
    case ${weapon_heavypistol}:
        return sub_2520(2493, a_1, 0);
    case 0x92a27487:
        return sub_2520(2796, a_1, 0);
    case 0x83839c4:
        return sub_2520(2806, a_1, 0);
    case 0x61012683:
        return sub_2520(2523, a_1, 0);
    case 0xa89cb99e:
        return sub_2520(2826, a_1, 0);
    case 0x7f7497e5:
        return sub_2520(2816, a_1, 0);
    case 0x3aabbbaa:
        return sub_2520(2904, a_1, 0);
    case 0xc734385a:
        return sub_2520(2914, a_1, 0);
    case 0xab564b93:
        return sub_2520(2932, a_1, 0);
    case 0x63ab0442:
        return sub_2520(2940, a_1, 0);
    case 0xa3d4d34:
        return sub_2520(2948, a_1, 0);
    case 0xdc4db296:
        return sub_2520(2965, a_1, 0);
    case 0xd8df3c3c:
        return sub_2520(2958, a_1, 0);
    }
    return 0;
}

auto sub_7e0f(auto a_0) {
    if (a_0 == ${weapon_pistol}) {
        v_3 = 244;
        v_4 = 245;
    } else if (a_0 == ${weapon_combatpistol}) {
        v_3 = 254;
        v_4 = 255;
    } else if (a_0 == ${weapon_appistol}) {
        v_3 = 274;
        v_4 = 275;
    } else if (a_0 == ${weapon_microsmg}) {
        v_3 = 284;
        v_4 = 285;
    } else if (a_0 == ${weapon_smg}) {
        v_3 = 294;
        v_4 = 295;
    } else if (a_0 == ${weapon_assaultrifle}) {
        v_3 = 314;
        v_4 = 315;
    } else if (a_0 == ${weapon_carbinerifle}) {
        v_3 = 323;
        v_4 = 324;
    } else if (a_0 == ${weapon_specialcarbine}) {
        v_3 = 2505;
        v_4 = 2506;
    } else if (a_0 == ${weapon_snspistol}) {
        v_3 = 1731;
        v_4 = 1732;
    } else if (a_0 == ${weapon_advancedrifle}) {
        v_3 = 332;
        v_4 = 333;
    } else if (a_0 == ${weapon_mg}) {
        v_3 = 341;
        v_4 = 342;
    } else if (a_0 == ${weapon_combatmg}) {
        v_3 = 350;
        v_4 = 351;
    } else if (a_0 == ${weapon_sawnoffshotgun}) {
        v_3 = 377;
        v_4 = 378;
    } else if (a_0 == ${weapon_pumpshotgun}) {
        v_3 = 368;
        v_4 = 369;
    } else if (a_0 == ${weapon_assaultshotgun}) {
        v_3 = 396;
        v_4 = 397;
    } else if (a_0 == ${weapon_sniperrifle}) {
        v_3 = 415;
        v_4 = 416;
    } else if (a_0 == ${weapon_heavysniper}) {
        v_3 = 424;
        v_4 = 425;
    } else if (a_0 == ${weapon_grenadelauncher}) {
        v_3 = 435;
        v_4 = 433;
    } else if (a_0 == ${weapon_minigun}) {
        v_3 = 449;
        v_4 = 450;
    } else if (a_0 == ${weapon_rpg}) {
        v_3 = 442;
        v_4 = 440;
    } else if (a_0 == ${weapon_bullpupshotgun}) {
        v_3 = 387;
        v_4 = 388;
    } else if (a_0 == ${weapon_assaultsmg}) {
        v_3 = 304;
        v_4 = 305;
    } else if (a_0 == 0x99aeeb3b) {
        v_3 = 264;
        v_4 = 265;
    } else if (a_0 == ${weapon_heavypistol}) {
        v_3 = 2495;
        v_4 = 2496;
    } else if (a_0 == ${weapon_bullpuprifle}) {
        v_3 = 2515;
        v_4 = 2516;
    } else if (a_0 == 0x61012683) {
        v_3 = 2525;
        v_4 = 2526;
    } else if (a_0 == 0x83839c4) {
        v_3 = 2808;
        v_4 = 2809;
    } else if (a_0 == 0xa89cb99e) {
        v_3 = 2828;
        v_4 = 2829;
    } else if (a_0 == 0x7f7497e5) {
        v_3 = 2818;
        v_4 = 2819;
    } else if (a_0 == 0x3aabbbaa) {
        v_3 = 2906;
        v_4 = 2907;
    } else if (a_0 == 0xc734385a) {
        v_3 = 2916;
        v_4 = 2917;
    } else if (a_0 == 0x63ab0442) {
        v_3 = 2942;
        v_4 = 2940;
    } else if (a_0 == 0xab564b93) {
        v_3 = 2934;
        v_4 = 2932;
    } else if (a_0 == 0xa3d4d34) {
        v_3 = 2950;
        v_4 = 2951;
    } else if (a_0 == 0xdc4db296) {
        v_3 = 2967;
        v_4 = 2968;
    } else { 
        return 0.0;
    }
    v_5 = SYSTEM::TO_FLOAT(sub_2520(v_3, -1, 0));
    v_6 = SYSTEM::TO_FLOAT(sub_2520(v_4, -1, 0));
    if (v_5 > 0.0) {
        v_7 = v_6 / v_5;
        if (v_7 > 1.0) {
            v_7 = 1.0;
        }
        v_7 *= 100.0;
        v_8 = SYSTEM::ROUND(v_7);
        v_7 = SYSTEM::TO_FLOAT(v_8);
        return v_7;
    }
    return 0.0;
}

auto sub_8193(auto a_0) {
    switch (a_0) {
    case 0:
        return "";
        break;
    case ${weapon_unarmed}:
        return "";
        break;
    case ${weapon_pistol}:
        return "WT_PIST_DESC";
        break;
    case ${weapon_combatpistol}:
        return "WTD_PIST_CBT";
        break;
    case ${weapon_appistol}:
        return "WTD_PIST_AP";
        break;
    case ${weapon_smg}:
        return "WTD_SMG";
        break;
    case ${weapon_microsmg}:
        return "WTD_SMG_MCR";
        break;
    case ${weapon_assaultrifle}:
        return "WTD_RIFLE_ASL";
        break;
    case ${weapon_carbinerifle}:
        return "WTD_RIFLE_CBN";
        break;
    case ${weapon_advancedrifle}:
        return "WTD_RIFLE_ADV";
        break;
    case ${weapon_mg}:
        return "WTD_MG";
        break;
    case ${weapon_combatmg}:
        return "WTD_MG_CBT";
        break;
    case ${weapon_pumpshotgun}:
        return "WTD_SG_PMP";
        break;
    case ${weapon_sawnoffshotgun}:
        return "WTD_SG_SOF";
        break;
    case ${weapon_assaultshotgun}:
        return "WTD_SG_ASL";
        break;
    case ${weapon_heavysniper}:
        return "WTD_SNIP_HVY";
        break;
    case ${weapon_remotesniper}:
        return "WTD_SNIP_RMT";
        break;
    case ${weapon_sniperrifle}:
        return "WTD_SNIP_RIF";
        break;
    case ${weapon_grenadelauncher}:
        return "WTD_GL";
        break;
    case ${weapon_rpg}:
        return "WTD_RPG";
        break;
    case ${weapon_minigun}:
        return "WTD_MINIGUN";
        break;
    case ${weapon_grenade}:
        return "WTD_GNADE";
        break;
    case ${weapon_smokegrenade}:
        return "WTD_GNADE_SMK";
        break;
    case ${weapon_stickybomb}:
        return "WTD_GNADE_STK";
        break;
    case ${weapon_molotov}:
        return "WTD_MOLOTOV";
        break;
    case ${weapon_stungun}:
        return "WTD_STUN";
        break;
    case ${weapon_petrolcan}:
        return "WTD_PETROL";
        break;
    case ${weapon_digiscanner}:
        return "WTD_DIGI";
        break;
    case ${weapon_electric_fence}:
        return "WTD_ELCFEN";
        break;
    case ${vehicle_weapon_tank}:
        return "";
        break;
    case ${vehicle_weapon_space_rocket}:
        return "";
        break;
    case ${vehicle_weapon_player_laser}:
        return "";
        break;
    case ${object}:
        return "";
        break;
    case ${gadget_parachute}:
        return "WTD_PARA";
        break;
    case ${ammo_rpg}:
        return "";
        break;
    case ${ammo_tank}:
        return "";
        break;
    case ${ammo_space_rocket}:
        return "";
        break;
    case ${ammo_player_laser}:
        return "";
        break;
    case ${ammo_enemy_laser}:
        return "";
        break;
    case ${weapon_knife}:
        return "WTD_KNIFE";
        break;
    case ${weapon_nightstick}:
        return "WTD_NGTSTK";
        break;
    case ${weapon_hammer}:
        return "WTD_HAMMER";
        break;
    case ${weapon_bat}:
        return "WTD_BAT";
        break;
    case ${weapon_crowbar}:
        return "WTD_CROWBAR";
        break;
    case ${weapon_golfclub}:
        return "WTD_GOLFCLUB";
        break;
    case ${weapon_rammed_by_car}:
        return "";
        break;
    case ${weapon_run_over_by_car}:
        return "";
        break;
    case ${weapon_assaultsmg}:
        return "WTD_SMG_ASL";
        break;
    case ${weapon_bullpupshotgun}:
        return "WTD_SG_BLP";
        break;
    case 0x99aeeb3b:
        return "WTD_PIST_50";
        break;
    case 0x83839c4:
        return "WTD_VPISTOL";
        break;
    case 0x92a27487:
        return "WTD_DAGGER";
        break;
    case 0xab564b93:
        return "WTD_PRXMINE";
        break;
    case 0x63ab0442:
        return "WTD_HOMLNCH";
        break;
    default:
        if (sub_20b7(a_0, &v_3) != -1) {
            return sub_20ad(&v_3._fF);
        }
        break;
    }
    return "WT_INVALID";
}

auto sub_8520() {
    return g_1407E1;
}

auto sub_852c(auto a_0, auto a_1) {
    switch (a_0) {
    case 5:
        if (a_1 > -1) {
            return g_1441E9._fCB[a_1/*1*/];
        } else { }
        break;
    }
    return GAMEPLAY::IS_BIT_SET(g_1441E9._f3B5, a_0);
}

void sub_8567() {
    sub_8578(0, -1, -1, 0, 0);
}

void sub_8578(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4) {
    GRAPHICS::_AB58C27C2E6123C6("SET_COLUMN_SCROLL");
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_1);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_2);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(-1);
    if (!GAMEPLAY::IS_STRING_NULL_OR_EMPTY(a_3)) {
        GRAPHICS::_BEGIN_TEXT_COMPONENT(a_3);
        UI::ADD_TEXT_COMPONENT_INTEGER(a_1);
        UI::ADD_TEXT_COMPONENT_INTEGER(a_2);
        GRAPHICS::_END_TEXT_COMPONENT();
    } else { 
        sub_17b6("");
    }
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(a_4);
    GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
}

void sub_85d5(auto a_0, auto a_1) {
    sub_86c6();
    v_4 = 9;
    v_5 = a_0._f115;
    if (a_1._f5 < l_58) {
        v_5 += v_4 * a_1._f5;
    } else { 
        v_5 += v_4 * a_1._f5;
    }
    v_6 = a_1._f5 + 1;
    v_7 = l_58 + 1;
    sub_8578(0, v_6, v_7, "HUD_PAGE", 0);
}

auto sub_862c(auto a_0) {
    v_3 = a_0;
    v_4 = sub_2610(v_3);
    v_5 = sub_2156(v_3);
    if ((CONTROLS::IS_CONTROL_JUST_RELEASED(2, a_0) || CONTROLS::IS_DISABLED_CONTROL_JUST_RELEASED(2, a_0)) || sub_7ee(a_0, &g_1441E9._f3C1, 1)) {
        if (!GAMEPLAY::IS_BIT_SET(g_1441E9._f3B6[v_4/*1*/], v_5)) {
            GAMEPLAY::SET_BIT(&g_1441E9._f3B6[v_4/*1*/], v_5);
            return 1;
        }
    } else if (GAMEPLAY::IS_BIT_SET(g_1441E9._f3B6[v_4/*1*/], v_5)) {
        GAMEPLAY::CLEAR_BIT(&g_1441E9._f3B6[v_4/*1*/], v_5);
    }
    return 0;
}

void sub_86c6() {
    l_59 = 0;
    l_58 = 3;
    if (WEAPON::IS_WEAPON_VALID(${weapon_hammer})) {
        l_5A[10/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[10/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x99aeeb3b)) {
        l_5A[0/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[0/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bullpupshotgun})) {
        l_5A[1/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[1/*1*/] = -1;
    }
    if (sub_660b(1, 0)) {
        if (WEAPON::IS_WEAPON_VALID(${weapon_sawnoffshotgun})) {
            l_5A[2/*1*/] = (l_59 / 9) + l_58;
            l_59 += 1;
        } else { 
            l_5A[2/*1*/] = -1;
        }
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bottle})) {
        l_5A[3/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[3/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_snspistol})) {
        l_5A[4/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[4/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x61012683)) {
        l_5A[11/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[11/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_heavypistol})) {
        l_5A[7/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[7/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_specialcarbine})) {
        l_5A[5/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[5/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(${weapon_bullpuprifle})) {
        l_5A[6/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[6/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x92a27487)) {
        l_5A[8/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[8/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x83839c4)) {
        l_5A[9/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[9/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x7f7497e5)) {
        l_5A[14/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[14/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xa89cb99e)) {
        l_5A[13/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[13/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x3aabbbaa)) {
        l_5A[15/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[15/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xc734385a)) {
        l_5A[16/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[16/*1*/] = -1;
    }
    if (sub_6588()) {
        if (WEAPON::IS_WEAPON_VALID(0xf9dcbf2d)) {
            l_5A[22/*1*/] = (l_59 / 9) + l_58;
            l_59 += 1;
        } else { 
            l_5A[22/*1*/] = -1;
        }
    }
    if (WEAPON::IS_WEAPON_VALID(0x63ab0442)) {
        l_5A[18/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[18/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xab564b93)) {
        l_5A[17/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[17/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0x47757124)) {
        l_5A[12/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[12/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xa3d4d34)) {
        l_5A[19/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[19/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xdc4db296)) {
        l_5A[20/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[20/*1*/] = -1;
    }
    if (WEAPON::IS_WEAPON_VALID(0xd8df3c3c)) {
        l_5A[21/*1*/] = (l_59 / 9) + l_58;
        l_59 += 1;
    } else { 
        l_5A[21/*1*/] = -1;
    }
    if (l_59 == 0) {
        l_58 = 2;
        l_59 = 9;
    } else { 
        l_58 += l_59 / 9;
        l_59 -= 9 * (l_59 / 9);
    }
}

void sub_8ac1(auto a_0, auto a_1) {
    a_1._f115 = a_0;
}

void sub_8ad0() {
    sub_86c6();
    sub_8aef();
    sub_8578(0, 1, l_58 + 1, "HUD_PAGE", 0);
}

void sub_8aef() {
    sub_8afc(1);
}

void sub_8afc(auto a_0) {
    if (a_0) {
        sub_8b20(0, 3, 0, 2, 0, 0);
    } else { 
        sub_8b20(0, 2, 0, 2, 1, 0);
    }
}

void sub_8b20(auto a_0, auto a_1, auto a_2, auto a_3, auto a_4, auto a_5) {
    GRAPHICS::_AB58C27C2E6123C6("INIT_COLUMN_SCROLL");
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_0);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(0);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_1);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_2);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_3);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(1);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a_4);
    GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(a_5);
    GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
}

void sub_8b63(auto a_0) {
    a_0._f11C = 1;
}

void sub_8b71(auto a_0) {
    a_0._f11B = 1;
}

void sub_8b7f(auto a_0) {
    sub_8b93(a_0);
    a_0._f119 = 1;
}

void sub_8b93(auto a_0) {
    a_0/*{286}*/ = g_143AD6;
}

auto sub_8ba9() {
    return g_5F7C;
}